10900 So you want to be a 2n-aire?
The player starts with a prize of $1, and
is asked a sequence of nquestions. For
each question, he may
• quit and keep his prize.
• answer the question. If wrong, he
quits with nothing. If correct, the
prize is doubled, and he continues
with the next question.
After the last question, he quits with
his prize. The player wants to maximize
his expected prize.
Once each question is asked, the
player is able to assess the probability p
that he will be able to answer it. For each
question, we assume that pis a random
variable uniformly distributed over the range t..1.

Input
Input is a number of lines, each with two numbers: an integer 1 ≤n≤30, and a real 0 ≤t≤1. Input
is terminated by a line containing ‘0 0’. This line should not be processed.
Output
For each input nand t, print the player’s expected prize, if he plays the best strategy. Output should
be rounded to three fractional digits.

Sample Input
1 0.5
1 0.3
2 0.6
24 0.25
0 0
Sample Output
1.500
1.357
2.560
230.138

-----------------------------------------------------------------------------------------------------------------------------

10901 Ferry Loading III
Before bridges were common,
ferries were used to trans-
port cars across rivers. River
ferries, unlike their larger
cousins, run on a guide line
and are powered by the
river’s current. Cars drive
onto the ferry from one end,
the ferry crosses the river,
and the cars exit from the
other end of the ferry.
There is a ferry across the
river that can take ncars
across the river in tmin-
utes and return in tminutes.
A car may arrive at either
river bank to be transported
by the ferry to the opposite
bank. The ferry travels continuously back and forth between the banks so long it is carrying a car
or there is at least one car waiting at either bank. Whenever the ferry arrives at one of the banks, it
unloads its cargo and loads up to ncars that are waiting to cross. If there are more than n, those that
have been waiting the longest are loaded. If there are no cars waiting on either bank, the ferry waits
until one arrives, loads it (if it arrives on the same bank of the ferry), and crosses the river. At what
time does each car reach the other side of the river?

Input
The first line of input contains c, the number of test cases. Each test case begins with n,t,m. mlines
follow, each giving the arrival time for a car (in minutes since the beginning of the day), and the bank
at which the car arrives (‘left’ or ‘right’).
Output
For each test case, output one line per car, in the same order as the input, giving the time at which
that car is unloaded at the opposite bank. Output an empty line between cases.
You may assume that 0 <n,t,m≤10000. The arrival times for each test case are strictly non-
decreasing. The ferry is initially on the left bank. Loading and unloading time may be considered to
be 0.

Sample Input
2
2 10 10
0 left
10 left
20 left
30 left
40 left
50 left
60 left
70 left
80 left
90 left
2 10 3
10 right
25 left
40 left
Sample Output
10
30
30
50
50
70
70
90
90
110
30
40
60

-----------------------------------------------------------------------------------------------------------------------------

10902 Pick-up sticks
Stan has nsticks of various length. He throws them
one at a time on the floor in a random way. After
finishing throwing, Stan tries to find the top sticks,
that is these sticks such that there is no stick on top
of them. Stan has noticed that the last thrown stick
is always on top but he wants to know all the sticks
that are on top. Stan sticks are very, very thin such
that their thickness can be neglected.

Input
Input consists of a number of cases. The data for each
case start with 1 ≤n≤100000, the number of sticks
for this case. The following nlines contain four num-
bers each, these numbers are the planar coordinates
of the endpoints of one stick. The sticks are listed in
the order in which Stan has thrown them. You may
assume that there are no more than 1000 top sticks.
The input is ended by the case with n= 0. This case
should not be processed.
Output
For each input case, print one line of output listing
the top sticks in the format given in the sample. The
top sticks should be listed in order in which they were
thrown.
Note: The picture to the right below illustrates
the first case from input.

Sample Input
5
1 1 4 2
2 3 3 1
1 -2.0 8 4
1 4 8 2
3 3 6 -2.0
3
0 0 1 1
1 0 2 1
2 0 3 1
0
Sample Output
Top sticks: 2, 4, 5.\
Top sticks: 1, 2, 3.

-----------------------------------------------------------------------------------------------------------------------------

10903 Rock-Paper-Scissors Tournament
Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other,
one of rock, paper, or scissors. A player chosing paper wins over a player chosing rock; a player chosing
scissors wins over a player chosing paper; a player chosing rock wins over a player chosing scissors. A
player chosing the same thing as the other player neither wins nor loses.
A tournament has been organized in which each of nplayers plays k rock-scissors-paper games with
each of the other players — k∗n∗(n−1)/2 games in total. Your job is to compute the win average for
each player, defined as w/(w+ l) where wis the number of games won, and lis the number of games
lost, by the player.

Input
Input consists of several test cases. The first line of input for each case contains 1 ≤n≤100 1 ≤k≤100
as defined above. For each game, a line follows containing p1,m1,p2,m2. 1 ≤p1 ≤nand 1 ≤p2 ≤n
are distinct integers identifying two players; m1 and m2 are their respective moves (‘rock’, ‘scissors’,
or ‘paper’). A line containing ‘0’ follows the last test case.
Output
Output one line each for player 1, player 2, and so on, through player n, giving the player’s win average
rounded to three decimal places. If the win average is undefined, output ‘-’. Output an empty line
between cases.

Sample Input
2 4
1 rock 2 paper
1 scissors 2 paper
1 rock 2 rock
2 rock 1 scissors
2 1
1 rock 2 paper
0\
Sample Output
0.333
0.667
0.000
1.000

-----------------------------------------------------------------------------------------------------------------------------

10904 Structural Equivalence
In programming language design circles,
there has been much debate about the
merits of “structural equivalence” vs.
“name equivalence” for type matching.
Pascal purports to have “name equiva-
lence”, but it doesn’t; C purports to have
structural equivalence, but it doesn’t. Al-
gol 68, the Latin of programming lan-
guages, has pure structural equivalence.
A simplified syntax for an Algol 68
type definition is as follows:
type_def -> type T = type_expr
type_expr -> T | int | real |
char | struct ( f ield_def s )
f ield_def s -> T | f ield_def s T
In this syntax, T is a programmer-
defined type name (in this problem, for simplicity, a single upper case letter). Plain text symbols
appear literally in the input, and zero or more spaces may appear where there are spaces in the syntax.
Algol 68 type equivalence say that two types are equivalent if they are the same primitive type or
they are both structures containing equivalent types in the same order.

Input
Input consists of several test cases. Each test case is a sequence of Algol 68 definitions, as described
above, one per line. A line containing ‘-’ separates test cases. A line containing ‘--’ follows the last
test case.
Output
The output for each case will consist of several lines; each line should contain a list of type names, all of
which represent equivalent types. Each type name should appear on exactly one line of output, and the
number of output lines should be minimized. The names in each list should be in alphabetical order;
the lines of output should also be in alphabetical order. Output an empty line between test cases.

Sample Input
type A = int
type B = A
type C = int
type X = struct(A B)
type Y = struct(B A)
type Z = struct(A Z)
type S = struct(A S)
type W = struct(B R)
type R = struct(C W)
--
Sample Output
A B C
R S W Z
X Y


-----------------------------------------------------------

10905 Children’s Game
There are lots of number games for children. These games are pretty easy to play but not so easy to
make. We will discuss about an interesting game here. Each player will be given Npositive integer.
(S)He can make a big integer by appending those integers after one another. Such as if there are
4 integers as 123, 124, 56, 90 then the following integers can be made — 1231245690, 1241235690,
5612312490, 9012312456, 9056124123, etc. In fact 24 such integers can be made. But one thing is sure
that 9056124123 is the largest possible integer which can be made.
You may think that it’s very easy to find out the answer but will it be easy for a child who has just
got the idea of number?
Input
Each input starts with a positive integer N(≤50). In next lines there are Npositive integers. Input
is terminated by N=0, which should not be processed.
Output
For each input set, you have to print the largest possible integer which can be made by appending all
the Nintegers.
Sample Input
4
123 124 56 90
5
123 124 56 90 9
5
9 9 9 9 9
0
Sample Output
9056124123
99056124123
99999

----------------------------------------------------------


1

自動縮放
10906 Strange Integration
Do not get perplexed with the name of problem, it has nothing to do with integral calculus. We will
concentrate on integration of simple algebraic expressions.
Complex algebraic expressions consisting of integers, addition and multiplication operators and
parentheses can be represented by the following BNF notations
< expr > →< expr > + < term >
< expr > →< term >
< term > →< term > ∗< f actor >
< term > →< f actor >
< f actor > →(< expr >)
< f actor > →num
According to the above grammar, both operators are left associative and multiplication is given higher
precedence. So, 2 + 3 ∗4 is same as 2 + (3 ∗4). Similarly, 2 + 3 + 4 is same as (2+3) + 4. On the other
hand, (2 + 3) * 4 is different to 2 + 3 ∗4. It may be surprising but 2 + 3 + 4 is different to 2 + (3 +
4) as in this case, the order of evaluation is different.-
2 + 3 + 4 2 + (3 + 4)
= 5 + 4 = 2 + 7
= 9 = 9
Consider the expression (2 + 3) ∗4 + (2 + 3) ∗5 + 6
The above picture depicts two different ways of representing the expression in hand if we follow the
given grammar. The left one is known as the AST (Abstract Syntax Tree) and the other one is DAG
(common sub-expression is handled once). Such a representation clearly shows the way of evaluating
an algebraic expression. Here, each non-leaf node is assigned a unique variable name. As a result, we
can have a sequence of simple expressions to evaluate the expression
Universidad de Valladolid OJ: 10906 – Strange Integration 2/2
a = 2 + 3 a = 2 + 3
b = a ∗4 b = a ∗4
c = 2 + 3 d = a ∗5
d = c ∗5 e = b + d
e = b + d f = e + 6
f = e + 6
In both cases, f denotes the original expression (2 + 3) ∗4 + (2 + 3) ∗5 + 6. Here, you have to
integrate a sequence of simple expressions into the original one. A simple expression will always be of
the form
variable = (variable|integer)(+|∗)(variable|integer)
For a given sequence of simple expressions, there can be several original expressions. Consider the
following cases
a = 2 + 3 b = (2 + 3) ∗4
b = a ∗4 b = ((2 + 3) ∗4)
Then b can be - b = ((2) + (3)) ∗4
etc.
We need the first one, i.e. expression having minimum number of literals.
Input
The input file will start with an integer, T (1 ≤T ≤100) denoting the number of tests. Each input will
start with a positive integer, N (1 ≤N ≤50) which is the number of simple expressions. Subsequent
lines will contain the simple expressions defined above. The input will be valid, i.e. it will be always
possible to construct a correct expression. Also, variable names will be referenced once they have been
assigned. Either variable name or integers can have at most 10 characters. The integers will be always
positive here (no unary minus) and variable names will contain letters only. Spaces will be used to
separate numbers, variables and operators.
Output
For each input, print ‘Expression #D:’ followed by the expression denoted by the last variable in the
list of simple expressions. Here D is the test number, starting from 1. The length of any expression
will not be greater than 5000.
Sample Input
2
2
A = 2 + 3
B = A + A
3
A = 2 + 3
B = A + 4
C = B + 5
Sample Output
Expression #1: 2+3+(2+3)
Expression #2: 2+3+4+5

------------------------------------------------------------

10907 Art Gallery
The ancient art gallery is a special one and it
is convex in shape. But recently due to the ex-
tension, one of its vertex becomes concave (a
vertex which produces an angle greater than
180 degree). Previously, the whole art gallery
was visible by the lights. But it may not be
the case now. The authority wants to know the
area covered by each of the light ( Just turn
on one light and keep others off ) now. In the
following figure, dark region shows the area cov-
ered by the light which is on.
Input
Each dataset will start with a positive integer,
N (1 ≤N ≤20). In next few lines there
will be N Cartesian coordinates defining the art
gallery. The points will be in anti-clockwise order. The coordinates will be integer and their absolute
value will not exceed 1000. Then in next line there will be a positive integer L. Following L lines will
contain the coordinates of the lights which will also be integers. The lights are guaranteed not to be
outside the gallery. Exactly one vertex of the gallery will be concave.
Input is terminated by EOF.
Output
For each set of input print ‘Gallery #i’ where i is the number of gallery to be considered (starting
with 1). In next L lines print the area covered by j’th light. Use two digits after decimal point in case
of covered area.
Sample Input
5
0 0
50 50
100 0
100 100
0 100
2
49 50
50 51
Sample Output
Gallery #1
6250.00
7500.00

------------------------------------------------------------

10908 Largest Square
Given a rectangular grid of characters you have to find out the length of a side of the largest square such
that all the characters of the square are same and the center [intersecting point of the two diagonals]
of the square is at location (r,c). The height and width of the grid is Mand Nrespectively. Upper
left corner and lower right corner of the grid will be denoted by (0, 0) and (M−1,N−1) respectively.
Consider the grid of characters given below. Given the location (1, 2) the length of a side of the largest
square is 3.
abbbaaaaaa
abbbaaaaaa
abbbaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaccaaaaaa
aaccaaaaaa
Input
The input starts with a line containing a single integer T(<21). This is followed by Ttest cases. The
first line of each of them will contain three integers M, Nand Q(<21) separated by a space where
M, Ndenotes the dimension of the grid. Next follows Mlines each containing Ncharacters. Finally,
there will be Qlines each containing two integers rand c. The value of Mand Nwill be at most 100.
Output
For each test case in the input produce Q+ 1 lines of output. In the first line print the value of M, N
and Qin that order separated by single space. In the next Qlines, output the length of a side of the
largest square in the corresponding grid for each (r,c) pair in the input.
Sample Input
1
7 10 4
abbbaaaaaa
abbbaaaaaa
abbbaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaccaaaaaa
aaccaaaaaa
1 2
2 4
4 6
5 2
Sample Output
7 10 4
Universidad de Valladolid OJ: 10908 – Largest Square 2/2
3
1
5
1

------------------------------------------------------------

10909 Lucky Number
Lucky numbers are defined by a variation of the well-known sieve of Eratosthenes. Beginning
with the natural numbers strike out all even ones, leaving the odd numbers 1, 3, 5, 7, 9, 11, 13, ...
The second number is 3, next strike out every third number, leaving 1, 3, 7, 9, 13, ...The third
number is 7, next strike out every seventh number and continue this process infinite number of
times. The numbers surviving are called lucky numbers. The first few lucky numbers are:
1,3,7,9,13,15,21,25,31,33,......
In this problem your task is to test whether a number can be written as the sum of two lucky
numbers.
Input
The input file contains at most 100000 lines of input. Each line contains a single integer n(0 <n≤
2000000). Input is terminated by end of file.
Output
For each line of input produce one line of output. This line should be of one of the following types
depending on whether nis expressible as the sum of two lucky numbers.
nis not the sum of two luckies!
nis the sum of L1 and L2.
For the second case, always make sure that (L2 −L1) is nonnegative and minimized.
Sample Input
11
12
Sample Output
11 is not the sum of two luckies!
12 is the sum of 3 and 9.

------------------------------------------------------------

10910 Marks Distribution
In an examination one student appeared in Nsubjects and has got total Tmarks. He has passed in
all the Nsubjects where minimum mark for passing in each subject is P. You have to calculate the
number of ways the student can get the marks. For example, if N= 3, T= 34 and P= 10 then the
marks in the three subject could be as follows.
Subject 1 Subject 2 Subject 3
1 14 10 10
2 13 11 10
3 13 10 11
4 12 11 11
5 12 10 12
6 11 11 12
7 11 10 13
8 10 11 13
9 10 10 14
10 11 12 11
11 10 12 12
12 12 12 10
13 10 13 11
14 11 13 10
15 10 14 10
So there are 15 solutions. So F(3,34,10) = 15.
Input
In the first line of the input there will be a single positive integer K followed by K lines each containing
a single test case. Each test case contains three positive integers denoting N, Tand Prespectively.
The values of N, Tand Pwill be 1 ≤N≤70, 1 ≤P≤T≤70. You may assume that the final answer
will fit in a standard 32-bit integer.
Output
For each input, print in a line the value of F(N,T,P).
Sample Input
2
3 34 10
3 34 10
Sample Output
15
15

------------------------------------------------------------

10911 Forming Quiz Teams
You have been given the job of forming the quiz teams for the next ‘MCA CPCI Quiz Championship’.
There are 2∗Nstudents interested to participate and you have to form Nteams, each team consisting
of two members. Since the members have to practice together, all the students want their members
house as near as possible. Let x1 be the distance between the houses of group 1, x2 be the distance
between the houses of group 2 and so on. You have to make sure the summation (x1 +x2 +x3 +...+xn)
is minimized.
Input
There will be many cases in the input file. Each case starts with an integer N(N≤8). The next 2∗N
lines will given the information of the students. Each line starts with the students name, followed by
the xcoordinate and then the ycoordinate. Both x,yare integers in the range 0 to 1000. Students
name will consist of lowercase letters only and the length will be at most 20.
Input is terminated by a case where Nis equal to 0.
Output
For each case, output the case number followed by the summation of the distances, rounded to 2 decimal
places. Follow the sample for exact format.
Sample Input
5
sohel 10 10
mahmud 20 10
sanny 5 5
prince 1 1
per 120 3
mf 6 6
kugel 50 60
joey 3 24
limon 6 9
manzoor 0 0
1
derek 9 9
jimmy 10 10
0
Sample Output
Case 1: 118.40
Case 2: 1.41

------------------------------------------------------------

10912 Simple Minded Hashing
All of you know a bit or two about hashing. It involves mapping an element into a numerical value
using some mathematical function. In this problem we will consider a very ‘simple minded hashing’. It
involves assigning numerical value to the alphabets and summing these values of the characters.
For example, the string “acm” is mapped to 1 + 3 + 13 = 17. Unfortunately, this method does not
give one-to-one mapping. The string “adl” also maps to 17 (1 + 4 + 12). This is called collision.
In this problem you will have to find the number of strings of length L, which maps to an integer S,
using the above hash function. You have to consider strings that have only lowercase letters in strictly
ascending order.
Suppose L= 3 and S= 10, there are 4 such strings.
1. abg
2. acf
3. ade
4. bce
“agb” also produces 10 but the letters are not strictly in ascending order.
“bh” also produces 10 but it has 2 letters.
Input
There will be several cases. Each case consists of 2 integers Land S(0 <L,S<10000). Input is
terminated with 2 zeros.
Output
For each case, output ‘Case#:’ where # is replaced by case number. Then output the result. Follow
the sample for exact format. The result will fit in 32 signed integers.
Sample Input
3 10
2 3
0 0
Sample Output
Case 1: 4
Case 2: 1

------------------------------------------------------------

10913 Walking on a Grid
You will be given a square grid of size N ×N . The top-left square has a coordinate of (1, 1) and that
of bottom-right is (N, N ). Your job is to walk from (1, 1) to (N, N ). Very easy, right? Thats why you
have to follow some rules when walking.
1. You can only move left, right or down.
2. (i, j −1) is left of (i, j), (i, j + 1) is right of (i, j) and (i + 1, j) is down of (i, j).
3. You can never move outside the grid.
4. You can not step on a cell more than once.
5. Every cell has an integer associated with it.
6. You have to make sure the sum of integers of the path is maximized.
7. You can step on at most k negative integers from source to destination.
Input
Each case will start with two integers N and k. N ≤75 and k ≤5. Each of the next N lines will
contain N integers each given in row major order. That is, the first integer of the first row is (1, 1) and
the last integer of last row is (N, N ). Input terminates with two zeros on a line.
Output
For every case output the case number. If it’s not possible to reach the destination meeting the above
rules then output ‘impossible’, else print the maximum sum of integers of the path.
Sample Input
4 1
1 2 3 -5
-10 6 0 -1
-10 -10 -10 2
0 0 0 1
4 0
1 2 3 -5
-10 6 0 -1
-10 -10 -10 2
0 0 0 1
0 0
Sample Output
Case 1: 11
Case 2: impossible

------------------------------------------------------------

10914 Abundance and Perfect Numbers
Perfect numbers are the numbers whose sum of divisors are twice the number itself. For example 28 is
a perfect number because the summation of the divisors of 28 is (1 + 2 + 4 + 7 + 14 + 28) = 56 = 2 ∗28.
Like perfect persons perfect numbers are also rare. The first few even perfect numbers are 6, 28, 496,
8128, 33550336, 8589869056, 137438691328 and 2305843008139952128. The sign σ is used to denote
the function, the sum of all divisors. So we can write σ(28) = 56. If n is a perfect number then
σ(n) −2n = 0. If an even number has only one odd divisor (other than one) then that number is called
almost odd prime. For example 6, 24 are almost odd prime numbers. Let X denote the set of all almost
odd prime numbers. Then the abundance function abun() is defined as
abun(n)=∑
ai∈X, ai≤n
σ(ai)−2ai
for any positive number n. Given the value of n your job is to find the value of abun(n).
Input
The input file contains at most 1001 lines of inputs. Each line contains an integer n (1 ≤n ≤10000000),
which denotes the value of n. Input is terminated by a line where the value of n is zero. This line
should not be processed.
Output
For each line of input produce one line of output. This line contains two integers separated by a single
space. The first integer is the input number n and the second integer is the value of abun(n).
Sample Input
10
20
1000000
0
Sample Output
10 -2
20 0
1000000 -13478901222

------------------------------------------------------------

10915 War on Weather
After an unprovoked hurricane attack on
the south shore, Glorious Warrior has de-
clared war on weather. The first salvo in
this campaign will be a coordinated pre-
emptive attack on as many tropical de-
pressions as possible. GW reckons that
the attack will neutralize the tropical de-
pressions before they become storms, and
dissuade others from forming.
GW has at his disposal k space-to-
earth killer satellites at various locations
in space. mtropical depressions are
known to exist at various locations on the
earth’s surface. Each satellite can attack any number of targets on the earth provided there is line of
sight between the satellite and each target. How many different targets can be hit?
Input
The input consists of several test cases. Each case begins with a line containing integers 0 <k,m≤100
as defined above. k lines follow, each giving x,y,z— the location in space of a satellite at the scheduled
time of attack. mlines then follow, each giving x,y,z— the location of a target tropical depression.
Assume the earth is a sphere centred at (0,0,0) with circumference 40,000 km. All targets will be on
the surface of the earth (within 10−9km) and all satellites will be at least 50 km above the surface. A
line containing ‘0 0’ follows the last test case.
Output
For each test case, output a line giving the total number of targets that can be hit. If a particular target
falls within 10−8km of the boundary between being within line-of-sight and not, it may be counted
either way. (That is, you need not consider rounding error so long as it does not exceed 10−8km.)
Sample Input
3 2
-10.82404031 -1594.10929753 -6239.77925152
692.58497298 -5291.64700245 4116.92402298
3006.49210582 2844.61925179 5274.03201053
2151.03635167 2255.29684503 5551.13972186
-1000.08700886 -4770.25497971 4095.48127333
3 4
0 0 6466.197723676
0 6466.197723676 0
6466.197723676 0 0
6366.197723676 0 0
6365.197723676 112.833485488 0
0 0 6366.197723676
Universidad de Valladolid OJ: 10915 – War on Weather 2/2
0 -6366.197723676 0
0 0
Sample Output
2
3

------------------------------------------------------------

10916 Factstone Benchmark
Amtel has announced that it will release a 128-bit computer chip
by 2010, a 256-bit computer by 2020, and so on, continuing its
strategy of doubling the word-size every ten years. (Amtel re-
leased a 64-bit computer in 2000, a 32-bit computer in 1990, a
16-bit computer in 1980, an 8-bit computer in 1970, and a 4-bit
computer, its first, in 1960.)
Amtel will use a new benchmark – the Factstone – to advertise
the vastly improved capacity of its new chips. The Factstone
rating is defined to be the largest integer nsuch that n! can be
represented as an unsigned integer in a computer word.
Given a year 1960 ≤y≤2160, what will be the Factstone
rating of Amtel’s most recently released chip?
Input
There are several test cases. For each test case, there is one line of input containing y. A line containing
‘0’ follows the last test case.
Output
For each test case, output a line giving the Factstone rating.
Sample Input
1960
1981
0
Sample Output
3
8

------------------------------------------------------------

10917 A Walk Through the Forest
Jimmy experiences a lot of stress at work
these days, especially since his accident
made working difficult. To relax after a
hard day, he likes to walk home. To make
things even nicer, his office is on one side
of a forest, and his house is on the other.
A nice walk through the forest, seeing the
birds and chipmunks is quite enjoyable.
The forest is beautiful, and Jimmy
wants to take a different route everyday.
He also wants to get home before dark, so
he always takes a path to make progress
towards his house. He considers taking a
path from A to B to be progress if there
exists a route from B to his home that
is shorter than any possible route from
A. Calculate how many different routes
through the forest Jimmy might take.
Input
Input contains several test cases followed by a line containing ‘0’. Jimmy has numbered each intersection
or joining of paths starting with 1. His office is numbered 1, and his house is numbered 2. The first
line of each test case gives the number of intersections N, 1 <N≤1000, and the number of paths M.
The following Mlines each contain a pair of intersections aband an integer distance 1 ≤d≤1000000
indicating a path of length dbetween intersection aand a different intersection b. Jimmy may walk a
path any direction he chooses. There is at most one path between any pair of intersections.
Output
For each test case, output a single integer indicating the number of different routes through the forest.
You may assume that this number does not exceed 2147483647.
Sample Input
5 6
1 3 2
1 4 2
3 4 3
1 5 12
4 2 34
5 2 24
7 8
1 3 1
1 4 1
3 7 1
Universidad de Valladolid OJ: 10917 – A Walk Through the Forest 2/2
7 4 1
7 5 1
6 7 1
5 2 1
6 2 1
0
Sample Output
2
4

------------------------------------------------------------

10918 Tri Tiling
In how many ways can you tile a 3 ×nrectangle with 2 ×1 dominoes?
Here is a sample tiling of a 3 ×12 rectangle.
Input
Input consists of several test cases followed by a line
containing ‘-1’. Each test case is a line containing an
integer 0 ≤n≤30.
Output
For each test case, output one integer number giving
the number of possible tilings.
Sample Input
2
8
12
-1
Sample Output
3
153
2131

------------------------------------------------------------

10919 Prerequisites?
Freddie the frosh has chosen
to take k courses. To meet
the degree requirements, he
must take courses from each
of several categories. Can
you assure Freddie that he
will graduate, based on his
course selection?
Input
Input consists of several test
cases. For each case, the
first line of input contains
1 ≤k≤100, the number
of courses Freddie has cho-
sen, and 0 ≤m≤100, the
number of categories. One or
more lines follow containing
k4-digit integers follow; each
is the number of a course se-
lected by Freddie. Each cat-
egory is represented by a line
containing 1 ≤c≤100, the
number of courses in the cat-
egory, 0 ≤r≤c, the mini-
mum number of courses from
the category that must be
taken, and the ccourse num-
bers in the category. Each
course number is a 4-digit in-
teger. The same course may
fulfil several category requirements. Freddie’s selections, and the course numbers in any particular
category, are distinct. A line containing ‘0’ follows the last test case.
Output
For each test case, output a line containing ‘yes’ if Freddie’s course selection meets the degree require-
ments; otherwise output ‘no’.
Sample Input
3 2
0123 9876 2222
2 1 8888 2222
3 2 9876 2222 7654
Universidad de Valladolid OJ: 10919 – Prerequisites? 2/2
3 2
0123 9876 2222
2 2 8888 2222
3 2 7654 9876 2222
0
Sample Output
yes
no

------------------------------------------------------------

10920 Spiral Tap
The game of Spiral Tap is played on a square grid. Pieces are
placed on a grid and the moves are realized according to the
position of the pieces on the grid. However, the coordinate system
in the game of Spiral Tap are a bit different that those find in
traditional board games, such as chess.
The cell numbering scheme follow a spiral, starting from the
center of the grid in an anti-clockwise fashion. The figure on the
right illustrates the cell numbering scheme.
The goal is, given the spiral tap coordinates of a cell, find its
cartesian coordinates (line 1 is at the bottom, and column 1 is
the leftmost).
Input
The input is a series of lines. Each line is composed of two numbers: SZand P. SZis the size of the
border of the grid and is an odd number no larger than 100000. Pis the spiral position of a cell in this
grid. The line such that SZ=P=0marks the end of the input (and is not part of the data set).
Output
For each line in the data set of the input, your program must echo a line ‘Line = X, column = Y.’,
where Xand Yare the cartesian coordinates of the corresponding cell.
Sample Input
3 1
3 3
3 9
5 9
5 10
0 0
Sample Output
Line = 2, column = 2.
Line = 3, column = 1.
Line = 3, column = 3.
Line = 4, column = 4.
Line = 5, column = 4.

------------------------------------------------------------

10921 Find the Telephone
In some places is common to remember a phone number associating its digits to letters. In this way
the expression “MY LOVE” means 69 5683. Of course there are some problems, because some phone
numbers can not form a word or a phrase and the digits 1 and 0 are not associated to any letter.
Your task is to read an expression and find the corresponding phone number based on the table
below. An expression is composed by the capital letters (A-Z), hyphens (-) and the numbers 1 and 0.
Letters Number
ABC 2
DEF 3
GHI 4
JKL 5
MNO 6
PQRS 7
TUV 8
WXYZ 9
Input
The input consists of a set of expressions. Each expression is in a line by itself and has Ccharacters,
where 1 ≤C≤30. The input is terminated by enf of file (EOF).
Output
For each expression you should print the corresponding phone number.
Sample Input
1-HOME-SWEET-HOME
MY-MISERABLE-JOB
Sample Output
1-4663-79338-4663
69-647372253-562

------------------------------------------------------------

10922 2 the 9s
A well-known trick to know if an integer Nis a multiple of nine is to compute the sum Sof its digits.
If Sis a multiple of nine, then so is N. This is a recursive test, and the depth of the recursion needed
to obtain the answer on Nis called the 9-degree of N.
Your job is, given a positive number N, determine if it is a multiple of nine and, if it is, its 9-degree.
Input
The input is a file such that each line contains a positive number. A line containing the number 0 is
the end of the input. The given numbers can contain up to 1000 digits.
Output
The output of the program shall indicate, for each input number, if it is a multiple of nine, and in case
it is, the value of its nine-degree. See the sample output for an example of the expected formatting of
the output.
Sample Input
999999999999999999999
9
9999999999999999999999999999998
0
Sample Output
999999999999999999999 is a multiple of 9 and has 9-degree 3.
9 is a multiple of 9 and has 9-degree 1.
9999999999999999999999999999998 is not a multiple of 9.

------------------------------------------------------------

10923 Seven Seas
Seven Seas is a nice game where you are the captain of a battle ship. You are in the middle of the
ocean and there are some enemy ships trying to catch you. Your mission is to run away from them.
Destroy the enemies if you can!
The game is played on a 9×8board and you can move in all the 8 directions, one step each time.
You move first, then the enemy ships move. The enemy ships are pretty dumb, so that they will always
move to the closest position they can get to you, even if that position will destroy their ship. A ship is
destroyed if it moves to a cell that contais a rock. If two enemy ships move to the same cell they are
also destroyed and their remains will stay in that cell so that if another ship try to move there it will
be destroyed too.
If an enemy ship reaches your ship, you are dead and the game is over.
Input
The first line of the input contains the number of scenarios. Each scenarion consists of a 9×8board
of charachters. Your ship is represented by a ‘S’ on the board and the enemy ships are represented by
a ‘E’. The rocks are represented by a ‘#’ and the ‘.’ represents the sea. See the sample input to see the
specific input format.
There will be at least one and at most nine enemy ships. There will be an empty line between two
scenarios.
Output
For each scenario you must find out if it is possible to destroy all the enemy ships in less than 10 steps.
If that is the case, you must print one line containing the string: ‘I'm the king of the Seven Seas!’.
Otherwise, you must print one line with the string: ‘Oh no! I'm a dead man!’.
Sample Input
3
........
.E.#....
...E....
..#.....
........
........
..S.....
........
........
........
.E.E....
...S....
.E..E...
........
........
........
Universidad de Valladolid OJ: 10923 – Seven Seas 2/2
........
........
E......#
........
........
........
........
........
........
.......S
#.......
Sample Output
I'm the king of the Seven Seas!
Oh no! I'm a dead man!
Oh no! I'm a dead man!

------------------------------------------------------------

10924 Prime Words
A prime number is a number that has only two divisors: itself and the number one. Examples of prime
numbers are: 1, 2, 3, 5, 17, 101 and 10007.
In this problem you should read a set of words, each word is composed only by letters in the range
a-z and A-Z. Each letter has a specific value, the letter a is worth 1, letter b is worth 2 and so on until
letter z that is worth 26. In the same way, letter A is worth 27, letter B is worth 28 and letter Z is worth
52.
You should write a program to determine if a word is a prime word or not. A word is a prime word
if the sum of its letters is a prime number.
Input
The input consists of a set of words. Each word is in a line by itself and has Lletters, where 1 ≤L≤20.
The input is terminated by enf of file (EOF).
Output
For each word you should print: ‘It is a prime word.’, if the sum of the letters of the word is a
prime number, otherwise you should print: ‘It is not a prime word.’.
Sample Input
UFRN
contest
AcM
Sample Output
It is a prime word.
It is not a prime word.
It is not a prime word.

------------------------------------------------------------

10925 Krakovia
Viktor lives in a far and cold country named Krakovia that is passing by difficult times. Viktor works
in a factory and after a work day he often goes with some friends to a bar to drink some beers and to
dream with better times.
Due to some economical problems the inflation is very high in Krakovia and a beer costs about
5,400,000,000 Krakovian dollars. Because this, is hard to check the value of the bill and to divide its
value equally by Viktor and his friends. As you have a good heart you have decided to help them to
solve this problem.
Input
There will be several test cases, each test case stats with two numbers 1 ≤N≤1000 that is the number
of itens in the bill and 1 ≤F≤20 that represents how many friends are in the bar and should pay
the bill. Then there will be Nlines, each line represents the value of a item. The value of a item is
indicated by an integer 1 ≤V≤1020. Input is terminated by a bill where N= F= 0.
Output
For each test case you should print the message: ‘Bill #Ncosts S: each friend should pay P’,
where Nrepresents the number of the bill, starting from 1; Sindicates the sum of the itens of the bill;
and Pis how much money each friend should pay, you should calculte this value by dividing the total
value of the bill by the number of friends in the bar, if the result is not an integer value just print the
integer part of the number, see the sample input/output. After each test case, you should print a blank
line.
Sample Input
3 3
5400000000
5400000000
5400000000
3 2
5400000000
5400000000
9000000001
0 0
Sample Output
Bill #1 costs 16200000000: each friend should pay 5400000000
Bill #2 costs 19800000001: each friend should pay 9900000000

------------------------------------------------------------

10926 How Many Dependencies?
In this problem you will need to find out which task has the most number of dependencies. A task A
depends on another task B if B is a direct or indirect dependency of A.
For example, if A depends on B and B depends on C, then A has two dependencies, one direct and
one indirect.
You can assume there will be no cyclic dependencies in the input.
Input
The input consists of a set of scenarios. Each scenario begins with one integer N, 0 <N≤100, in a
line indicating how many tasks this scenario contains. Then there will be Nlines, one for each task.
Each line will contain an integer 0 ≤T≤N−1, the number of direct dependencies of that task, plus
Tintegers, the identifiers of that dependencies. Tasks are numbered from 1 to N.
The input ends with a scenario where N= 0.
Output
For each scenario, print the number of the task with the greatest number of dependencies alone in a
line. If there are ties, show the task with the lowest identifier.
Sample Input
3
1 2
1 3
0
4
2 2 4
0
2 2 4
0
0
Sample Output
1
1

------------------------------------------------------------

10927 Bright lights
The famous contempory art designer Momo is preparing its new open-air exhibit. It will consist of
randomly placed poles emitting lasers in horizontal direction. All the lasers shall reach the so-called
laser totem T. However, as the poles are placed randomly at different heights, a laser light L might be
hidden behind a taller pole P, if P, T and L are aligned and if the height of P is larger or equal to the
pole where L is attached.
Your job is, given a configuration of poles, determine which are the visible poles.
Input
The input is a file containing several data sets. Each data set composed as follows. The first line
contains an integer 0 <N≤100000, giving the number of poles. The following Nlines contain three
integers −100000 ≤X≤100000, 0 ≤Y≤10000, and 0 ≤Z≤10000 such that Xand Yare the
coordinates of the pole and Zis the height of the pole in the position (X,Y). You can assume that
in a given data set, no two poles have the same Xand Ycoordinates and the position of the totem is
(0,0) and its height is infinite. The input ends with a line containing the number ‘0’.
Output
The output of the program shall indicate if all lights are visible or not. If some lights are invisible
from the laser totem, the program shall output their Xand Ycoordinates, in increasing order of
X-coordinate and Y-coordinate. Put a semicolon between the coordinates of two points that are not
visible and put a dot after the coordinates of the last point that is not visible. See the sample output
for an example of the expected formatting of the output.
Sample Input
3
-1 0 1
0 1 1
1 0 1
5
-1 0 1
-1 1 2
-2 2 2
-3 3 3
-4 4 2
0
Sample Output
Data set 1:
All the lights are visible.
Data set 2:
Some lights are not visible:
x = -4, y = 4;
x = -2, y = 2.

------------------------------------------------------------

10928 My Dear Neighbours
Manuel is a Portuguese that is vegetarian and does not like his neighbourhood very much because all
his neighbours are always doing barbecues and the smoke goes into his house.
Now Manuel has decided to move and he wants to go to a new place with as few neighbours as
possible. So he asked your help to write a program to determine the best place where he could live in
peace without the barbecue smoke.
Input
The first line of the input is N≤30 that indicates the number of test cases. Each test case consists
of a number P, where 2 ≤P≤1000, that indicates the number of places where Manuel can live, each
place is numbered from 1 to P. Then there will be Plines indicating the neighbours of each place, each
neighbour is separated by exactly one space. Each place has at least 1 neighbour and at most P−1
neighbours, because Manuel can not be a neighbour of himself. For this problem if P1 has P2 as his
neighbour does not mean that P2 has P1 as his neighbour.
Each test case is separated by a blank line.
Output
For each test case you should print the place that has the minimum number of neighbours. If there are
more than one you should print all places separeted by one space and ordered by the indices, the lower
indices should come first.
Sample Input
2
3
2
1 3
2 1
4
2
3
1 4 2
2 1 3
Sample Output
1
1 2

------------------------------------------------------------

10929 You can say 11
Your job is, given a positive number N, determine if it is a multiple of eleven.
Input
The input is a file such that each line contains a positive number. A line containing the number ‘0’ is
the end of the input. The given numbers can contain up to 1000 digits.
Output
The output of the program shall indicate, for each input number, if it is a multiple of eleven or not.
Sample Input
112233
30800
2937
323455693
5038297
112234
0
Sample Output
112233 is a multiple of 11.
30800 is a multiple of 11.
2937 is a multiple of 11.
323455693 is a multiple of 11.
5038297 is a multiple of 11.
112234 is not a multiple of 11.

------------------------------------------------------------

10930 A-Sequence
For this problem an A-sequence is a sequence of positive integers ai satisfying 1 ≤a1 <a2 <a3 <...
and every ak of the sequence is not the sum of two or more distinct earlier terms of the sequence.
You should write a program to determine if a given sequence it is or it is not an A-sequence.
Input
The input consists of a set of lines, each line starts with an integer 2 ≤D≤30 that indicates the
number of integers that the current sequence has. Following this number there is the sequence itself.
The sequence is composed by integers, each integer is greater than or equal to 1 and less than or equal
to 1000. The input is terminated by enf of file (EOF).
Output
For each test case in the input you should print two lines: the first line should indicate the number of
the test case and the test case itself; in the the second line you should print ‘This is an A-sequence.’,
if the corresponding test case is an A-sequence or ‘This is not an A-sequence.’, if the corresponding
test case is not an A-sequence.
Sample Input
2 1 2
3 1 2 3
10 1 3 16 19 25 70 100 243 245 306
Sample Output
Case #1: 1 2
This is an A-sequence.
Case #2: 1 2 3
This is not an A-sequence.
Case #3: 1 3 16 19 25 70 100 243 245 306
This is not an A-sequence.

------------------------------------------------------------

10931 Parity
We define the parity of an integer n as the sum of the bits in binary representation computed modulo
two. As an example, the number 21 = 101012has three 1s in its binary representation so it has parity
3(mod2), or 1.
In this problem you have to calculate the parity of an integer 1 ≤I ≤2147483647.
Input
Each line of the input has an integer I and the end of the input is indicated by a line where I = 0 that
should not be processed.
Output
For each integer I in the inputt you should print a line ‘The parity of B is P (mod 2).’, where B
is the binary representation of I.
Sample Input
1
2
10
21
0
Sample Output
The parity of 1 is 1 (mod 2).
The parity of 10 is 1 (mod 2).
The parity of 1010 is 2 (mod 2).
The parity of 10101 is 3 (mod 2).

------------------------------------------------------------

10932 Calculator
You are an employee of a company which produces calculators. Your company is developing an out-
standing new calculator, and you are developing the software of that new calculator. This calculator
is intended for people that would like to save intermediate values in the memory for future use. For
this reason, this new calculator has space for 26 values in its memory, named a to z. Those values are
stored with double precision.
For simplicity, here we will consider only the four basic operations, sum, minus, multiply and divide
(+−∗/). Also, expressions can be grouped with parenthesis. You should consider the precedence
of operations, with multiplication and division first, then addition and subtraction. Also, only integer
numbers and the letters a to z will appear on the expression, along with the symbols of the operations,
the parenthesis and the equal sign for attribution.
Input
The input consists of an undetermined number of lines, with one expression per line. One expression
can be an attribution or a question. If the expression is an attribution it will begin with X=, where
Xis the letter representing the memory space and a≤X≤z. If the expression is not an attribution
expression, then it is a question. There will be no blank spaces in the expression. You will only produce
output for the questions.
The input will end with the end of file (EOF).
Output
For each question, print it’s evaluated value on a line by itself. Print the result rounded to two decimal
places. See sample input/output for the exact format.
Sample Input
x=10
x
x+10
x/5
x/2
x/3
y=5/3
y
x*y
x-y
Sample Output
10.00
20.00
2.00
5.00
3.33
1.67
16.67
Universidad de Valladolid OJ: 10932 – Calculator 2/2
8.33

------------------------------------------------------------

10933 Volleyball
Your task in this problem is to find out the classification of volleyball teams in a cup, and also the best
teams according to some criterias.
You will be given a number of cups, each one with some teams competing. Then, you will be given
the matches and their results. A team win a match if it has won 3 sets. There will at most 5 sets per
match. There are no draws. A team wins a set if it has made 25 or more points and the other team is
at least two points behind.
Input
The input consists of several cups. Each cup is to be considered alone. Each cup description begins
with a line indicating the number of teams competing in that cup, 2 <T<1000. Than, Tlines will
follow, each one with the name of one team competing in this cup. Team names are 20 character or
less and may contain spaces and letters.
Following, there will be a line with 1 <M<1000 indicating the number of matches already played
on this cup. The next Mlines will have the description of a single match. Each match description
begins with the name of both teams of that match separated by a single dash (-). Following the name
of the second team there will be a collon (:). After the name of the teams it will follow the descriptions
of the sets played on the match. A set will have the total points of the first team on the set, than a
single dash, than the total points of the second team.
The input is terminated with a cup where T= 0. This case is not to be considered. Each cup is
separated by a blank line.
See sample input for the correct format of the input.
Output
For each cup, print the classification of the cup after the presented matches. The team classification
will be according to the following rules, respectively:
• The number of winning matches
• The number of winning sets less the number of lost sets
• The number of points scored
If the teams are still tied after considering the criterias above, sort them by their names.
Output a blank line after each cup result. Your output must follow the format presented on sample
output.
Sample Input
3
Team1
Team2
Team 3
3
Team1-Team2: 25-19 25-20 25-23
Team1-Team 3: 1-25 2-25 3-25
Universidad de Valladolid OJ: 10933 – Volleyball 2/2
Team2-Team 3: 25-21 31-29 29-31 29-31 33-35
0
Sample Output
1234567890123456789012345678901234567890 ---> Don't print this line,
use only as reference
Team 3 2 4 222
Team1 1 0 81
Team2 0 -4 209

------------------------------------------------------------

10934 Dropping water balloons
It’s frosh week, and this year your friends have
decided that they would initiate the new com-
puter science students by dropping water bal-
loons on them. They’ve filled up a large crate
of identical water balloons, ready for the event.
But as fate would have it, the balloons turned
out to be rather tough, and can be dropped
from a height of several stories without burst-
ing!
So your friends have sought you out for help.
They plan to drop the balloons from a tall
building on campus, but would like to spend
as little effort as possible hauling their balloons
up the stairs, so they would like to know the
lowest floor from which they can drop the bal-
loons so that they do burst.
You know the building has nfloors, and
your friends have given you k identical balloons
which you may use (and break) during your tri-
als to find their answer. Since you are also lazy,
you would like to determine the minimum num-
ber of trials you must conduct in order to de-
termine with absolute certainty the lowest floor from which you can drop a balloon so that it bursts
(or in the worst case, that the balloons will not burst even when dropped from the top floor). A trial
consists of dropping a balloon from a certain floor. If a balloon fails to burst for a trial, you can fetch
it and use it again for another trial.
Input
The input consists of a number of test cases, one case per line. The data for one test case consists of
two numbers k and n, 1 ≤k≤100 and a positive nthat fits into a 64 bit integer (yes, it’s a very tall
building). The last case has k= 0 and should not be processed.
Output
For each case of the input, print one line of output giving the minimum number of trials needed to solve
the problem. If more than 63 trials are needed then print ‘More than 63 trials needed.’ instead of
the number.
Sample Input
2 100
10 786599
4 786599
60 1844674407370955161
63 9223372036854775807
0 0
Universidad de Valladolid OJ: 10934 – Dropping water balloons 2/2
Sample Output
14
21
More than 63 trials needed.
61
63

------------------------------------------------------------

10935 Throwing cards away I
Given is an ordered deck of ncards numbered 1 to
nwith card 1 at the top and card nat the bottom.
The following operation is performed as long as there
are at least two cards in the deck:
Throw away the top card and move the
card that is now on the top of the deck to
the bottom of the deck.
Your task is to find the sequence of discarded
cards and the last, remaining card.
Input
Each line of input (except the last) contains a number
n≤50. The last line contains ‘0’ and this line should
not be processed.
Output
For each number from the input produce two lines of
output. The first line presents the sequence of dis-
carded cards, the second line reports the last remain-
ing card. No line will have leading or trailing spaces.
See the sample for the expected format.
Sample Input
7
19
10
6
0
Sample Output
Discarded cards: 1, 3, 5, 7, 4, 2
Remaining card: 6
Discarded cards: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 4, 8, 12, 16, 2, 10, 18, 14
Remaining card: 6
Discarded cards: 1, 3, 5, 7, 9, 2, 6, 10, 8
Remaining card: 4
Discarded cards: 1, 3, 5, 2, 6
Remaining card: 4

------------------------------------------------------------

10936 Land surveyor’s job
The job of a land surveyor has been substantially changed with the ar-
rival of GPS and satellite imaging. However, the traditional tools of a
land surveyor still are a theodolite, for measuring angles, and a measur-
ing tape for measuring distances. Although in real land surveying we
are concerned with three dimensions, for this problem we will restrict
ourselves to a plane.
The backbone of any land survey is a traverse consisting of a se-
quence of n stations numbered 1, 2, . . . , n. Stations are chosen by some
criteria that do not concern us here. For each station i two measure-
ments are taken:
• the length of the forward shot, i.e. the distance from station i to station i + 1, in case of station
n this is the distance to station 1,
• the angle between the back shot and the fore shot measured clockwise; this is the angle from the
segment (i, i −1) to the segment (i,i + 1) measured clockwise. In case of station 1, this angle
is entered as 0 since the n-th station is not known in advance. For station n this angle is the
angle between the segments (n, n −1) and (n, 1). For all stations other than station 1 this angle
is non-zero.
For a given traverse, when locations of stations i and i + 1 are
available we can compute the location of station i + 2. In consequence,
given a traverse and actual locations of stations 1 and 2 we can calculate
the locations of all other stations. However, because of the inaccuracy
of theodolites and measuring tapes, the results of our calculations are
approximate. Therefore, after computing locations of stations n −1
and n we can compute the location of station 1 and compare it to the
assumed actual location. We say that a traverse is acceptable if the
distance between the actual location of station 1 and its location as
calculated from the traverse is less than 0.1% of the total length of the
traverse.
Input
The input consists of a number of cases. The data of each case appears
on a number of input lines, the first of which contains a non-negative
integer n giving the number of the stations in a traverse, 3 ≤n ≤1000.
The following n lines contain the distance and angle measured for each station in increasing order of
their numbers. Except for station 1, all angles are specified in degrees, minutes and seconds in the
format shown in the sample input. Note that the angle for station 1 is shown as 0.
Input is terminated by a line with n equal to 0.
Output
For each case of input, output one line stating whether the traverse of this case was ‘Acceptable’ or
‘Not acceptable’.
Universidad de Valladolid OJ: 10936 – Land surveyor’s job 2/2
Sample Input
4
1 0
1 90d00'00"
0.999 90d00'00"
1 90d00'00"
4
10 0
10 270d00'00"
9.95 270d00'00"
10 270d00'00"
0
Sample Output
Acceptable
Not acceptable

------------------------------------------------------------

10937 Blackbeard the Pirate
Blackbeard the Pirate has stashed up to 10 treasures on a tropical
island, and now he wishes to retrieve them. He is being chased by
several authorities however, and so would like to retrieve his treasure as
quickly as possible. Blackbeard is no fool; when he hid the treasures,
he carefully drew a map of the island which contains the position of
each treasure and positions of all obstacles and hostile natives that are
present on the island.
Given a map of an island and the point where he comes ashore,
help Blackbeard determine the least amount of time necessary for him
to collect his treasure.
Input
Input consists of a number of test cases. The first line of each test
case contains two integers hand wgiving the height and width of the
map, respectively, in miles. For simplicity, each map is divided into grid
points that are a mile square. The next hlines contain wcharacters,
each describing one square on the map. Each point on the map is one
of the following:
• @ The landing point where Blackbeard comes ashore.
•  ̃ Water. Blackbeard cannot travel over water while on the island.
• # A large group of palm trees; these are too dense for Blackbeard to travel through.
• . Sand, which he can easily travel over.
• ∗A camp of angry natives. Blackbeard must stay at least one square away or risk being captured
by them which will terminate his quest. Note, this is one square in any of eight directions,
including diagonals.
• ! A treasure. Blackbeard is a stubborn pirate and will not leave unless he collects all of them.
Blackbeard can only travel in the four cardinal directions; that is, he cannot travel diagonally.
Blackbeard travels at a nice slow pace of one mile (or square) per hour, but he sure can dig fast,
because digging up a treasure incurs no time penalty whatsoever.
The maximum dimension of the map is 50 by 50. The input ends with a case where both hand w
are 0. This case should not be processed.
Output
For each test case, simply print the least number of hours Blackbeard needs to collect all his treasure
and return to the landing point. If it is impossible to reach all the treasures, print out ‘-1’.
Universidad de Valladolid OJ: 10937 – Blackbeard the Pirate 2/2
Sample Input
7 7
~~~~~~~
~#!###~
~...#.~
~~....~
~~~.@~~
.~~~~~~
...~~~.
10 10
~~~~~~~~~~
~~!!!###~~
~##...###~
~#....*##~
~#!..**~~~
~~....~~~~
~~~....~~~
~~..~..@~~
~#!.~~~~~~
~~~~~~~~~~
0 0
Sample Output
10
32

------------------------------------------------------------

10938 Flea circus
Sometimes, if you are searching for ladybugs, all you find
are tree fleas. An old tree near the anthill serves as a home
of two fleas who sometimes steal honeydew from aphids
living on the tree. On the old tree, branches connect the
forks (spaces where two or more branches meet) and leaves
where the fleas can rest. Fleas are so small that the ants
cannot see them and thus fleas are safe. Because of their
size, the fleas satiate their appetite pretty quickly and then
have a lot of energy to jump. They decide to jump toward
each other complying with the following rules:
• There is exactly one way for the fleas to go from one
leaf or fork in the tree to another leaf or fork without
ever turning back. Each of the fleas starts jumping
along such a route to the current location of the other
flea.
• The fleas can only jump from one fork or leaf of the
tree to another fork or leaf if they are connected by a
branch.
• If the two fleas land at the same time in the same place
then they decide to sit and chat for quite a while.
• If the two fleas land at the same time in two neighboring places on the tree (forks or leaves) then
they keep jumping forever.
Input
The input file contains multiple test cases. Each test case starts with an integer n, the number of leaves
and forks in the tree, 1 ≤n ≤5000. We assume that leaves and forks are numbered from 1 to n.
Each of the following n −1 lines describe tree branches; each branch is described by two integers a and
b, meaning that the branch connects the fork or leaf labeled a and the fork or leaf labeled b. In the
(n +1)-st line there is one integer l, 1 ≤l ≤500, saying how many starting positions of the fleas you are
to consider for the tree. Each of the following l lines contains two positive integers (not greater than
n). These numbers define the tree places in which the fleas start their jumping. Input is terminated by
the case with n equal to 0.
Output
Your program should output l lines for each test case. The i-th line for a case should look like
The fleas meet at p.
where p identifies the place where the fleas meet, or
The fleas jump forever between p and r.
where p and r are two neighboring places on the tree with p ≤r.
Universidad de Valladolid OJ: 10938 – Flea circus 2/2
Sample Input
8
1 2
1 3
2 4
2 5
3 6
3 7
5 8
5
5 1
7 4
1 8
4 7
7 8
0
Sample Output
The fleas meet at 2.
The fleas meet at 1.
The fleas jump forever between 2 and 5.
The fleas meet at 1.
The fleas jump forever between 1 and 2.

------------------------------------------------------------

10939 Ants, Aphids and a Ladybug
If you are searching for ladybugs, the best place to
look is near ants. The ants suck sweet honeydew from
aphids and therefore, where there are ants, there must
be aphids. Where there are aphids, there are more
likely to be ladybugs. Ants defend aphids against
ladybugs — for which aphids are a much sought for
delicacy.
An old tree near the anthill serves as an aphid
farm. On the old tree, branches connect the forks
(spaces where two or more branches meet) and leaves
where the aphids feed. There are k ant-guards (num-
bered from 1 to k) working on the farm. A ladybug
hunting aphids lands on the places where aphids feed,
i.e. on leaves or forks. When a ladybug lands on the
tree, the guard-ants set off in her direction in order
to chase her away. They comply with the following
rules:
• There is exactly one way for an ant to go from one fork or leaf in the tree to another fork or
leaf without ever turning back. Upon the ladybug’s landing, all of the ant-guards simultaneously
start going along such a route to the place where the ladybug landed.
• If there is an ant in the place of the ladybug’s landing, the ladybug takes off immediately.
• If at any time an ant rushing towards the ladybug spots another ant anywhere ahead on its route,
the ant stops and remains in its current position, yielding to the ant that is farther ahead.
• If two or more ants try to reach the same fork of the tree at the same time, only one does so – the
one with the smallest id number. The other ants trying to reach the same fork remain in their
places.
• An ant which gets to the place of ladybug’s landing chases it away and remains in this place.
The ladybug is stubborn and lands on the tree again, and then the ant-guards set off again trying
to chase the intruder away. In order to simplify the problem we assume that for each ant it takes a unit
of time to walk between two neighboring forks or a fork and a leaf (2 leaves cannot be neighbors).
Input
The input file contains multiple test cases. Each test case starts with an integer n, the number of leaves
and forks in the tree, 1 ≤n ≤5000. We assume that leaves and forks are numbered from 1 to n. Each
of the following n −1 lines describes tree branches; each branch is described by two integers a and b,
meaning that the branch connects forks or leaves labeled a and b. In the (n + 1)-st line there is one
integer k, 1 ≤k ≤1000 and k ≤n; k is the number of ants that guard the tree. There is one positive
integer (not greater than n) in each of the following k lines. The integer written in the (n + 1 + i)-th
line is the start position of the i-th ant. There is no fork or leaf in the tree occupied by more than
one ant. The line n + k + 2 contains one integer l, 1 ≤l ≤500, l saying how many times a ladybug
Universidad de Valladolid OJ: 10939 – Ants, Aphids and a Ladybug 2/2
lands on the tree. Each of the following l lines contains one positive integer (not greater than n). These
numbers define a sequence of tree places in which the ladybug lands. Input is terminated by the case
with n equal to 0.
Output
Your program should output k lines for each test case. In the i-th line for a case there should be two
integers separated by a single space — the final position of the i-th ant (number of a fork or a leaf) and
the number of times the i-th ant chased the ladybug away.
Sample Input
8
1 2
1 3
2 4
2 5
3 6
3 7
5 8
3
1
2
6
5
2
4
5
8
7
0
Sample Output
5 2
2 2
7 1

------------------------------------------------------------

10940 Throwing cards away II
Given is an ordered deck of ncards num-
bered 1 to nwith card 1 at the top and
card nat the bottom. The following op-
eration is performed as long as there are
at least two cards in the deck:
Throw away the top card and
move the card that is now on
the top of the deck to the bot-
tom of the deck.
Your task is to find the last, remaining
card.
Input
Each line of input (except the last) contains a positive number n≤500000. The last line contains ‘0’
and this line should not be processed. Input will not contain more than 500000 lines.
Output
For each number from input produce one line of output giving the last remaining card.
Sample Input
7
19
10
6
0
Sample Output
6
6
4
4

------------------------------------------------------------

10941 Words adjustment
In this problem, you are given two words x and y, and a finite sequence
of words {w1, w2, . . . wk}. If it is possible to obtain the same word by
appending to x and y some words from the given sequence of words, we
say that x and y can be adjusted. We would like to check whether the
words x and y can be adjusted using the words from the given sequence.
Given a word w, we can perform an operation w ∗wi, 1 ≤i ≤k,
consisting in appending the word wi to the word w at the right. We
define this as an append operation. The task is to find the smallest
number of append operations that are necessary to adjust two given
words using the words from a given sequence.
For example, words abba and ab can be adjusted by the words from
the sequence { baaabad, aa, badccaa, cc }. It suffices to append to
abba two words: aa and badccaa, and to ab three words: baaabad, cc
and aa. In both cases we obtain: abbaaabadccaa.
Input
The first line of input contains the number of cases that follow. The first two lines of data for each case
contain the words x and y, respectively. The third line contains the integer k, 0 ≤k ≤1000, which is
the length of the sequence of words that can be used for word adjustment. The following k lines contain
one word each. All words use only lowercase letters and contain between 1 and 1000 characters.
Output
For each case output one nonnegative integer giving the minimal number of operations that are needed
to adjust two given words, or output ‘-1’ if it is impossible.
Sample Input
2
abba
ab
4
baaabad
aa
badccaa
cc
a
ab
4
bb
ab
ba
aa
Universidad de Valladolid OJ: 10941 – Words adjustment 2/2
Sample Output
5
-1

------------------------------------------------------------

10942 Can of Beans
Starving, Jimmy went to the cupboard to see what he could make for
lunch. Unfortunately for him, the only food item inside was an old can
of beans. Under normal circumstances, he wouldn’t think about it, but
the old, beaten up appearance of the can worried him. “How long has
this been in here?”, he wondered out loud.
Turning the can over, he saw three cryptic numbers stamped into
the bottom: 09 06 03
Quickly realizing it was the best before date, he heaved a sigh of
relief: the can was still good for another 4 years or so...if the first
number was a year. Suddenly realizing the “09” could be the day and
not the year, he wasn’t so sure anymore. In fact, if the last number (the
“03”) was the year, then the can could have gone bad 2 years before!
(This Jimmy lives in the year 2005).
You have to help out Jimmy! Given the century that Jimmy lives in
and the three numbers on the bottom of the can, print out the earliest
valid date the can could have gone bad.
Input
The first line will contain an integer twhich is the number of test cases to follow. Each test case consists
of four integers, c, x, y, zon a line by themselves. c+1 is the century that Jimmy lives in, and is in the
range 0 ≤c<2∧30. x, y, zare the possible day, month, and year in the century but in an unknown
order. All are in the range 0 ≤x, y, z<100
Recall we want the earliest VALID date, so don’t forget about leap years! Here are a few facts you
can use about leap years:
• the year 0 is a leap year;
• every fourth year after 0 is a leap year, but
• every hundred year is NOT a leap year, but
• every four hundred year IS a leap year.
This isn’t exactly true in our world, but Jimmy lives on a different planet in a different galaxy.
Strangely enough, they use a calendar system astonishingly like our own, speak English, and also eat
beans packaged in cans!
Jimmy’s calendar, like ours, has the months January through December, numbered 01 through 12.
Each of Jimmy’s months contain the same number of days as our months on the standard, Gregorian
calendar. The days within months are numbered from 01 to 31, and no month has more than 31 days.
On a leap year, Jimmy’s Februaries also have 29 days instead of 28.
Output
The output will contain the integers in the order “YYMMDD” of the earliest possible date at which
the can of beans could have gone bad. If there is no valid date, print “-1”. Each test case should be
written on a line by itself.
Universidad de Valladolid OJ: 10942 – Can of Beans 2/2
Sample Input
2
20 9 6 3
13244324 99 99 99
Sample Output
03 06 09
-1

------------------------------------------------------------

10943 How do you add?
Larry is very bad at math — he usually uses a calculator, which worked
well throughout college. Unforunately, he is now struck in a deserted
island with his good buddy Ryan after a snowboarding accident.
They’re now trying to spend some time figuring out some good
problems, and Ryan will eat Larry if he cannot answer, so his fate is
up to you!
It’s a very simple problem — given a number N, how many ways
can K numbers less than Nadd up to N?
For example, for N=20and K=2, there are 21 ways:
0+20
1+19
2+18
3+17
4+16
5+15
...
18+2
19+1
20+0
Input
Each line will contain a pair of numbers Nand K. Nand K will both be an integer from 1 to 100,
inclusive. The input will terminate on 2 0’s.
Output
Since Larry is only interested in the last few digits of the answer, for each pair of numbers Nand K,
print a single number mod 1,000,000 on a single line.
Sample Input
20 2
20 2
0 0
Sample Output
21
21

------------------------------------------------------------

10944 Nuts for nuts..
So as Ryan and Larry decided that they don’t really taste
so good, they realized that there are some nuts located in
certain places of the island.. and they love them! Since
they’re lazy, but greedy, they want to know the shortest
tour that they can use to gather every single nut!
Can you help them?
Input
You’ll be given x, and y, both less than 20, followed by x
lines of ycharacters each as a map of the area, consisting
sorely of ‘.’, ‘#’, and ‘L’. Larry and Ryan are currently lo-
cated in ‘L’, and the nuts are represented by ‘#’. They can
travel in all 8 adjacent direction in one step. See below for
an example. There will be at most 15 places where there
are nuts, and ‘L’ will only appear once.
Output
On each line, output the minimum amount of steps starting
from ‘L’, gather all the nuts, and back to ‘L’.
Note: In the sample below, Larry and Ryan will go south
for a nut, then south again for another nut, then south twice
for another nut, and then back where they are.
Sample Input
5 5
L....
#....
#....
.....
#....
5 5
L....
#....
#....
.....
#....
Sample Output
8
8

------------------------------------------------------------

10945 Mother Bear
Unforunately for our lazy “heroes”, the nuts were
planted by an evil bear known as.. Dave, and they’ve
fallen right into his trap. Dave is not just any bear,
he’s a talking bear, but he can only understand sen-
tences that are palindromes. While Larry was dazed
and confused, Ryan figured this out, but need a way
to make sure his sentences are palindromic. So he
pulled out his trustly iPod, which thankfully have
this program you wrote just for this purpose... or did
you?
Input
You’ll be given many sentences. You have to deter-
mine if they are palindromes or not, ignoring case and punctuations. Every sentence will only contain
the letters A-Z, a-z, ‘.’, ‘,’, ‘!’, ‘?’. The end of input will be a line containing the word ‘DONE’, which
should not be processed.
Output
On each input, output ‘You won't be eaten!’ if it is a palindrome, and ‘Uh oh..’ if it is not a
palindrome.
Sample Input
Madam, Im adam!
Roma tibi subito motibus ibit amor.
Me so hungry!
Si nummi immunis
DONE
Sample Output
You won't be eaten!
You won't be eaten!
Uh oh..
You won't be eaten!

------------------------------------------------------------

10946 You want what filled?
Now that Ryan and Larry infuriated the
bear, they’re now forced to do menial
tasks for food, one such task is filling in
potholes on this deserted island. But of
course, it’s never quite that easy, as the
bear forces them to fill in the biggest hole
first. Since Ryan and Larry are still lazy
(very little has changed, you see), can you
tell them the order to fill in the holes?
Input
The first line will contain two numbers x
and y, followed by xlines of ycharacters
each. (xand yare less than 50). The
holes will be represented by the uppercase
characters A to Z, and regular land will be represented by ‘.’. There will be no other characters in the
map. Input will be terminated by having ‘0 0’ as input.
Output
For each map, output the problem number (as shown below), then output the hole represented by the
character, and the number of space the hole takes up, sorted by the size of the hole, break ties by
sorting the characters in alphabetical order, as shown in the sample output on a separate line as shown
below:
Sample Input
5 5
..AAA
E.BBB
..AA.
CC.DD
CC.D.
5 5
..AAA
E.BBB
..AA.
CC.DD
CC.D.
0 0
Sample Output
Problem 1:
C 4
A 3
Universidad de Valladolid OJ: 10946 – You want what filled? 2/2
B 3
D 3
A 2
E 1
Problem 2:
C 4
A 3
B 3
D 3
A 2
E 1

------------------------------------------------------------

10947 Bear with me, again..
There are bears everywhere! In fact, look around,
there might be one around you!
Okay, maybe not.
Here’s the story:
Larry is trying to come up with some kind of es-
cape plan from the island.. and then realizes that
he’s struck with nothing except for Ryan, some duct
tape, and some cardboard. What are the odds? He
knows how to (somewhat) build a raft of sorts from it!
Unforunately for Larry, since his craftmenship isn’t
quite good, not to mention he really have no tools, he
can only build a raft that lasts K straight days at sea,
after of which if it can get to an island, it can be fixed
up and reused. He notices that he and Ryan can row
at a speed of Mmiles per day. Still, with some luck,
and Ryan’s GPS (which came with the super-iPod,
you see), he is able to see islands from far far away.
Somehow all the islands are perfectly circular... and
he knows exactly where home is... can he get there,
hopping on islands along the way?
So doing some calculations, he realizes his fate...
Input
Everything will in miles.
First line will contain the integers K and M, as
defined above in the problem.
The second line of each input will contain three
integers, space limited: x, y, r. xand ybeing the coordinates of the current island, the rbeing the
radius of the island (somehow, all the islands are perfectly circular.)
Third line will contain three integers in the same format as above, will contain the location and
radius of the island they want to get to.
Then there will be a single integer Nwhich is followed by Nlines, each in the format of xi, yi, and
ri, each representing an island coordinate and its radius in miles. Nwill be at most 100.
No islands will have overlaps, and all integers representing coordinates and radius will be less than
200.
Output
For each test case, output
Larry and Ryan will escape!
if they can get back to their home island in some way, or
Larry and Ryan will be eaten to death.
if they cannot get home.
Universidad de Valladolid OJ: 10947 – Bear with me, again.. 2/2
Sample Input
1 1
0 0 1
0 3 1
0
1 1
0 0 1
0 5 1
0
1 1
0 0 1
0 6 1
1
0 3 1
Sample Output
Larry and Ryan will escape!
Larry and Ryan will be eaten to death.
Larry and Ryan will escape!

------------------------------------------------------------

10948 The primary problem
Larry now lost most of his knowledge after spend-
ing a few years on deserted islands all over the place.
When Ryan brought up the fact that every even num-
ber greater than 3 can represented as the sum of two
prime numbers, he couldn’t believe it! So now Larry
is trying to come up with some kind of counterexam-
ple, and you can help him!
Input
Each line will contain an integer Ngreater than 3.
The input will terminate when Nis 0. Nwill not be
bigger than 1 million.
Output
For each test case, output one way of summing two prime numbers. If there are more than one set of
sums for which this is true, choose the set of sum the maximizes the difference between them. See the
sample output. If a number cannot be represented as the sum of two prime number, print “NO WAY!”
as below.
Note: 10 can be 3+7 or 5+5, and since 7-3 is bigger than 5-5, we choose 3+7.
Sample Input
4
5
6
7
9
10
11
0
Sample Output
4:
2+2
5:
2+3
6:
3+3
7:
2+5
9:
2+7
10:
3+7
Universidad de Valladolid OJ: 10948 – The primary problem 2/2
11:
NO WAY!

------------------------------------------------------------

10949 Kids in a Grid
Two kids are walking in a H×Wgrid. Each square in the grid contains a character (whose ASCII
code lies between 33 and 127). Both kids can move north, east, west and south each step. The first kid
walked Nsteps, the second kid walked Msteps. (0 ≤N≤M≤20000).
If we write down all the characters each kid walks on, we get two strings SAand SB. your task is
to delete as few characters as possible, so that the two new strings are the same.
Input
the first line contains a single integer t(1 ≤t≤15), the number of test cases. Each test case contains
several lines. The first line contains two integers Hand W(1 ≤H,W≤20), the next Hlines contains
the grid. Next line contains three integers N, X0and Y0( 1 ≤X0≤H,1 ≤Y0≤W,Xincreases from
North to South, while Yincreases from West to East), indicating the first kinds walks from (X0,Y0),
for Nsteps. The next line contains a string of Ncharacters, N, E, W, Sstands for North, West, South
and East, respectively. The second kid’s information follows, which is the same format.
You may assume the walk sequence is correct: they will never go outside the grid.
Output
For each case, print the case number and two integers XAand XB, indicating the number of characters
deleted from SAand SB, respectively.
Note: In the first sample, SA= ABCDG, SB= ADEB, we must delete 3 characters from SAand 2
from SB, so that they are the same (both ABor AD)
Sample Input
2
3 4
ABCD
DEFG
ABCD
4 1 1
EEES
3 3 1
NES
3 4
ABCD
DEFG
ABCD
4 1 1
EEES
3 3 1
NES
Sample Output
Case 1: 3 2
Case 2: 3 2

------------------------------------------------------------

10950 Bad Code
In his endless attempt to keep his secret documents safe, Bob has designed yet another coding system.
In this system, every character is replaced by a unique positive integer value – which we call the code
for a character. However, this system – as expected – is not the best in the world. So more than one
plain text can result in the same encrypted string. Here are a few more notes:
• The document consists exclusively of lower-case letters.
• The code for a letter is no more than 99.
• The encrypted string does not contain more than 100 characters.
• A code may or may not be preceded by a 0 in the encrypted string (note the 2nd sample test
case).
Given the codes for each character and the encrypted string, you have to find all the plain text
strings in alphabetical order that produces that encrypted string.
Input
There will be no more than 500 test cases. Each test case starts with an integer N, which gives the
number of unique characters in the document. Each of next Nlines contains a character in the letter
and its code. The last line in the test case gives the encrypted string. The last test case will have
N=0. This last test case need not be processed.
Output
For each test case, print the test case number and the possible plain texts for the given encrypted string.
If there is more than 100 possible strings report only the first 100 strings. Print a blank line after the
output for each test case.
Sample Input
5
a 12
b 1
c 2
d 3
e 23
123
2
o 10
x 1
1010101
0
Universidad de Valladolid OJ: 10950 – Bad Code 2/2
Sample Output
Case #1
ad
bcd
be
Case #2
ooox
ooxx
oxox
oxxx
xoox
xoxx
xxox
xxxx

------------------------------------------------------------

10951 Polynomial GCD
Given two polynomials f(x) and g(x) in Zn, you have to find their GCDpolynomial, ie, a polynomial
r(x) (also in Zn) which has the greatest degree of all the polynomials in Znthat divide both f(x) and
g(x). There can be more than one such polynomial, of which you are to find the one with a leading
coefficient of 1 (1 is the unity in Zn. Such polynomial is also called a monic polynomial).
Note: A function f(x) is in Znmeans all the coefficients in f(x) is modulo n.
Input
There will be no more than 101 test cases. Each test case consists of three lines: the first line has n,
which will be a prime number not more than 1500. The second and third lines give the two polynomials
f(x) and g(x). The polynomials are represented by first an integer Dwhich represents the degree of
the polynomial, followed by (D+ 1) positive integers representing the coefficients of the polynomial.
the coefficients are in decreasing order of Exponent. Input ends with n= 0. The value of Dwon’t be
more than 100.
Output
For each test case, print the test case number and r(x), in the same format as the input
Note: The first sample input has 2x3+ 2x2+ x+ 1 and x4+ 2x2+ 2x+ 2 as the functions.
Sample Input
3
3 2 2 1 1
4 1 0 2 2 2
0
Sample Output
Case 1: 2 1 2 1

------------------------------------------------------------

10952 Pattern Transformations
Consider the two patterns of ‘O’ and ‘X’ below (‘.’ represent an empty square). We want the first pattern
to be transformed into the second pattern in one time unit. During this time unit, each symbol (‘O’ and
‘X’) can move one step in any of the four directions (or remain at its current square). All movements
happen simultaneously, so a symbol can move to an occupied square, if that symbol is moved to some
other square. If a symbol moves from square Ato B, and the symbol at Bmoves to A, we have a swap.
Write a program which calculates the least number of swaps needed to transform a given pattern into
another given pattern.
.XO.. ..XO.
..OX. .XX..
.XX.. ..OX.
To transform the first pattern above into the second one requires one swap: The two symbols in the
first line are moved to the right, the ‘O’ in the second line must be swapped with the ‘X’ below. The
other two ‘X’ are moved up and down, respectively.
Input
The first line in the input contains the number of test cases to follow (at most 20). Each test case starts
with a line containing two integers, wand h(1 ≤w,h≤8), the width and height of the two patterns.
Then follow h lines describing each row of the two patterns (the two patterns will be separated with
a single space, see the sample input). The only allowed characters in the patterns will be the symbols
‘O’, ‘X’ and ‘.’.
Output
For each input you should output a line containing a single integer: the least number of swaps required
to transform the first pattern into the second. If the transformation is not possible, output a ‘-1’.
Sample Input
3
5 3
.XO.. ..XO.
..OX. .XX..
.XX.. ..OX.
4 4
OXOX XOXO
XX.O OX.X
O..X X..O
XOXO OXOX
3 4
.X. .X.
.OX XO.
..O .O.
... ...
Universidad de Valladolid OJ: 10952 – Pattern Transformations 2/2
Sample Output
1
0
-1

------------------------------------------------------------

10953 Stochastic Digit Generator
A stochastic digit generator (SDG) generates a decimal digit with a certain probability. The probability
of the generation of one digit may be different than the other. Suppose this generator is allowed to
generate N digits of a number one after another from right to left (least significant to most significant).
“What is the probability that this number has a specific remainder when divided by 11?” In this problem
you will have to determine such probabilities with some additional constraints.
Input
The input file contains at most 51 blocks of input.
The description of each block starts with an integer 10 in a single line, which indicates that this is
a valid input set and the probability of the generation of 10 decimal digits follow. Each of the next
10 lines contains a decimal digit di and a floating-point number pi (1 ≤I ≤10). These lines indicate
that the generator generates the digit di with probability pi. Note that values of all di will be distinct
and ∑D
i=1 pi = 1. Next line contains an integer Q (0 < Q < 21) which indicates the number of queries
for this set. Each of the next Q lines contains a format string Si (1 ≤i ≤Q) which actually denotes
the format of the generated number followed my an integer r (0 ≤ri ≤10). Each character of the
format string will either be an ‘∗’ (asterisk) or a decimal digit. An asterisk in a position means that the
generator can generate any digit for that position, a decimal digit indicates that for those places the
generator doesnt work and generates only that specific digit. The format strings will have maximum
50 characters The integer ri denotes that when the generated number is divided by 11 the remainder
will be ri.
Input is terminated by a block whose first line contains a zero.
Output
For each block of input produce Q +1 lines of output. The description of output for each block is given
below:
The first line contains the serial of the block. Each of the next Q lines contains a floating-point
number with eight digits after the decimal point. The i-th floating-point number indicates the proba-
bility that the numbers generated according to the format string Si has reminder ri when divided by
11.
Sample Input
10
0 0.1
1 0.1
2 0.1
3 0.1
4 0.1
5 0.1
6 0.1
7 0.1
8 0.1
9 0.1
5
Universidad de Valladolid OJ: 10953 – Stochastic Digit Generator 2/2
*** 0
12* 0
1** 0
121 0
121 1
0
Sample Output
Case 1:
0.09100000
0.10000000
0.09000000
1.00000000
0.00000000

------------------------------------------------------------

10954 Add All
Yup!! The problem name reflects your task; just add a set of numbers. But you may feel yourselves
condescended, to write a C/C++ program just to add a set of numbers. Such a problem will simply
question your erudition. So, lets add some flavor of ingenuity to it.
Addition operation requires cost now, and the cost is the summation of those two to be added. So,
to add 1 and 10, you need a cost of 11. If you want to add 1, 2 and 3. There are several ways
1 + 2 = 3, cost = 3 1 + 3 = 4, cost = 4 2 + 3 = 5, cost = 5
3 + 3 = 6, cost = 6 2 + 4 = 6, cost = 6 1 + 5 = 6, cost = 6
Total = 9 Total = 10 Total = 11
I hope you have understood already your mission, to add a set of integers so that the cost is minimal.
Input
Each test case will start with a positive number, N(2≤N≤5000)followed by Npositive integers
(all are less than 100000). Input is terminated by a case where the value of Nis zero. This case should
not be processed.
Output
For each case print the minimum total cost of addition in a single line.
Sample Input
3
1 2 3
4
1 2 3 4
0
Sample Output
9
19

------------------------------------------------------------

10955 Playfair Cipher
The Playfair cipher was invented more than one and a half century ago by Sir Charles Wheatsone, one
of the pioneers of the electric telegraph. It was made popular by Baron Playfair of St Andrews, a friend
of Wheatstone, and used by British gouvernment institutions upto the first world war. The cipher’s
main advantages were that it is quite easy to use, both for encryption and decryption, and that it was
relatively secure compared to other ciphers of that age. Nowadays, however, it would stand no chance
against high speed computers, and that is what you are going to prove in this task.
To encrypt a message, the text is first converted to groups of two capitals, called digraphs. This is
done as follows:
1. Convert all letters in the text to uppercase and omit all non-alphabetic characters.
2. Replace all letters ‘J’ by ‘I’.
3. Form digraphs, but avoid having twice the same letter in a digraph. Insert an extra ‘X’ between
the identical letters if necessary. If the repeated letter is an ‘X’, insert a ‘Q’ instead.
4. If the last digraph would be incomplete, append an extra ‘X’ to the text (or a ‘Q’ if the last letter
in the text is an ‘X’).
Consider the following message: “Programming in C and Pascal is easy; I will learn Java
next year.” The digraph representation would be:
PR OG RA MX MI NG IN CA ND PA SC AL IS EA SY IW IL LX LE AR NI AV AN EX TY EA RX
Note the extra ‘X’ between the two ‘M’s of ‘programming’. There is no extra ‘X’ between the two ‘L’s
of ‘will’, because they are in different digraphs, but there is one between ‘will’ and ‘learn’. There is
also an extra ‘X’ at the end of the message. The ‘J’ in ‘Java’ is replaced by an ‘I’.
To illustrate the exceptions for the letter ‘X’ in the original text, consider the message “I am an
ex-xenophobe, attempting to relax!”. This becomes:
IA MA NE XQ XE NO PH OB EA TX TE MP TI NG TO RE LA XQ
The next stage is the replacement of each digraph by an other digraph according to the following
rules:
• The uppercase letters, ‘J’ excluded, are placed in a 5×5square in some predetermined order.
This is the key for the encryption.
• If the two letters of the digraph are in the same row of the square, replace them by the letters
occuring at the immediate right of each one. If one of the letters is in the rightmost column,
replace it by the letter in the first column of the same row (wrap around).
• If the two letters of the digraph are in the same column of the square, replace them by the letters
occuring immediately below each one. Wrap around to the same column in the top row if one of
them is in the bottom row.
• If the letters are neither in the same row nor the same column, replace the first letter by the letter
in the same row as the first letter and the same column as the second letter. Replace the second
letter by the letter in the same row as the second letter and the same column as the first letter.
The resulting digraphs form the encrypted code.
Universidad de Valladolid OJ: 10955 – Playfair Cipher 2/3
Consider the key:
The first digraph of the first example above is ‘PR’. Since the
letters are not in the same row or column, ‘P’ is replaced by ‘F’
and ‘R’ is replaced by ‘V’. The replacement digraph is ‘FV’.
Similarly the following digraphs, ‘OG’, ‘RA’, ‘MX’,‘MI’, ‘NG’ and
‘IN’, are replaced by resp. ‘CV’, ‘GE’, ‘PH’, ‘PW’, ‘AS’ and ‘UX’.
In the next digraph, ‘CA’, the letters occur in the same column,
so ‘C’ is replaced by ‘G’ and ‘A’ is replaced by ‘L’, resulting in the
new digraph ‘GL’.
We also encounter the digraph ‘EA’ with letters in the same
row. It’s converted to ‘HE’. Horizontal wrap around is encoun-
tered during the conversion of ‘IW’, ‘IL’ and ‘EX’. No vertical wrap
around occurs in the example, but the digraph ‘BM’ would convert
to ‘HK’.
The complete encryption of the first message is:
FV CV GE PH PW AS UX GL UY ZX GY LZ UV HE NS UI UQ IA QA EG XU XG EA HN KC HE VE
The second message encrypts to:
LX ZH AH EI NH XY MX KV HE OE RQ PD OQ AS KY EQ ZL EI
Decryption is easy once you know the key. That process is not described here, because I trust you
can figure that out for yourself.
In this problem you will implement a so called ’known plaintext attack’. You have a piece of plain
text and you also have it’s encrypted code. From that information you will have to deduce a key and
use that key to decode another piece of encrypted text.
Input
The input contains several cases, the number of which is on the first line. Every case has three parts.
The first part is the plaintext and consists of one or more lines of ordinary text. The second part is
the code that is the result of encrypting the first part. The third part is code for the text you are to
decrypt. The parts are terminated by a hashmark (‘#’) on a line by itself. Code parts are printed as
uppercase digraphs, 20 digraphs on a line, separated by one space. The last line of a code part can
contain fewer than 20 digraphs. No code part will contain more than 5000 digraphs.
The keys can differ between cases (of course).
Output
For each case, first output a line ‘Case x:’ where xis the case number (starting from 1).
Then output the decrypted code represented as digraphs in the same format as the code parts in
the input. Separate the cases by an empty line.
It is guaranteed that the first two parts of each case contain enough information to uniquely decode
any possible encoded text.
EPILOGUE (Not required to solve the problem above)
The plaintext for the second example is:
Cryptography is a very fascinating subject and it has a rich history. If you are interested in the Playfair
ciphers and many more others, I can strongly recommend Simon Singhs ”Code Book” that contains all
about the secret history of codes and code breaking.
The key was taken from Appendix E that contains the explanation of the Playfair cipher.
I owe my fascination for cryptography to Simon Singh.

Universidad de Valladolid OJ: 10955 – Playfair Cipher 3/3
Sample Input
2
Programming in C and Pascal is easy; I will learn Java next year.
#
FV CV GE PH PW AS UX GL UY ZX GY LZ UV HE NS UI UQ IA QA EG
XU XG EA HN KC HE VE
#
LX ZH AH EI NH XY MX KV HE OE RQ PD OQ AS KY EQ ZL EI
#
It is full moon!
Meet me at Hammersmith Bridge tonight.
#
MP PI NZ AZ RN QV UG GD DO GD RQ AR KY GD HD NK PR DA MS OG
UP GK IC QY
#
HL WT UP MC HQ RW PI CX DC ZD HB HG KL PM GI FP SK GE QR MF
MP AR BH HM HA SP DP TC WM DZ PO RL SG MU DC SB OD SM MU CS
UH RX BL MH HG WS DC BH MF KR MZ GT CD PU CS HD GH LK DP CT
GI RZ CD EV KY GD MF IP GT IF KG IC EH TE SD QV QG PR RQ EV
MU HK IF RC CR EQ OU PR SB GE CD PR PI UP DR UE EV FS BH MF
EV FS DA BC MK GI
#
Sample Output
Case 1:
IA MA NE XQ XE NO PH OB EA TX TE MP TI NG TO RE LA XQ
Case 2:
CR YP TO GR AP HY IS AV ER YF AS CI NA TI NG SU BI EC TA ND
IT HA SA RI CH HI ST OR YI FY OU AR EI NT ER ES TE DI NT HE
PL AY FA IR CI PH ER SA ND MA NY MO RE OT HE RS IC AN ST RO
NG LY RE CO MX ME ND SI MO NS IN GH SC OD EB OX OK TH AT CO
NT AI NS AL LA BO UT TH ES EC RE TH IS TO RY OF CO DE SA ND
CO DE BR EA KI NG

------------------------------------------------------------

10956 Prime Suspect
Let’s define the function Suspect(b, n), where b is an integer that is called the base, and n is an odd
integer. It returns one of the boolean values TRUE or FALSE.
• Let t be the highest power of 2 so that 2t devides n −1 and u be the biggest odd integer that
devides n −1. This means we can write n −1 = 2tu.
• Let x0 be bu mod n.
• For all i from 1 to t, let xi be (xi−1)2 mod n.
• If, for any i from 1 to t, xi = 1 and xi−1 <> 1 and xi−1 <> n −1, then return FALSE.
• else, if xt <> 1, then return FALSE.
• else return TRUE.
The connaisseur will recognize this function as the essential part of the Miller-Rabin primality test,
although it can appear in different forms throughout the literature. In Cormen et. al. Ch. 31 this
function is called Witness and returns the opposite boolean value.
We will call the odd number n suspect in base b if the above function returns TRUE. At the end of
this description three examples are given.
It can be proved that whenever the function Suspect(b, n) returns FALSE for some base b and an
odd number n it is sure that n is not a prime number. The reverse, however, is not the case: whenever
Suspect(b, n) returns TRUE, there is a high probability that n is a prime number, but we can’t be sure.
We say that Suspect(b, n) fails if it returns TRUE for an n that is not a prime number.
Upto 1000000 there are only 46 failures in base 2, the first three being 2047, 3277 and 4033. In base
3 there are 73 falures, but all of them are different from the base 2 failures, so for every odd number
n < 1000000 we have that if Suspect(2, n) and Suspect(3, n) we can be sure that n is a prime number.
Upto 232 we only need to calulate three bases: Suspect(2, n), Suspect(7, n) and Suspect(61, n). If
all three function calls return TRUE, it’s sure that n is a prime number. This gives us a very quick
primality test for all numbers within the range of current day integers.
In this problem we want you to calculate the failures of the function Suspect(b, n) in a certain base
and for a certain range of numbers n.
Input
The input consists of several lines, each containing three integers: Base, M in and M ax. Base is an
integer between 2 and 1024 (inclusive), M in and M ax will be between 3 and 4294967295 (inclusive).
M ax will not be smaller than M in. M ax will be at most 100000 bigger than M in.
A line with three zeroes marks the end of the input; this line should not be processed.
Output
For each line of input, one line of output: “There are N U M BER1 odd non-prime numbers between
N U M BER2 and N U M BER3.”.
If there are odd numbers within this range that fail as suspects in the given base, output an other
line: “N U M BER4 suspects fail in base N U M BER5:”, followed by all failures, in ascending
order, each on a line by itself. Use the plural form, even if there is only one failure.
Universidad de Valladolid OJ: 10956 – Prime Suspect 2/3
If there are no failures in this range, output the line: “There are no failures in base
N U M BER5.”.
N U M BER1..N U M BER5 are to be replaced by the appropriate values.
Separate the cases by a blank line.
Notes:
Suspect(2, 121):
n −1 = 120 = 8 ∗15 = 23 ∗15, therefore t = 3, u = 15
x0 = 215 mod 121 = 32768 mod 121 = 98
x1 = 982 mod 121 = 9604 mod 121 = 45
x2 = 452 mod 121 = 2025 mod 121 = 89
x3 = 892 mod 121 = 7921 mod 121 = 56
None of the xi is 1, so the loop test continues until the end. Since xt is not 1, the function will
return FALSE. This is a correct result, since 121 = 11 ∗11 is composite.
Suspect(3, 121):
n −1 = 120 = 8 ∗15 = 23 ∗15, therefore t = 3, u = 15
x0 = 315 mod 121 = 14348907 mod 121 = 1
x1 = 12 mod 121 = 1 mod 121 = 1
x2 = 12 mod 121 = 1 mod 121 = 1
x3 = 12 mod 121 = 1 mod 121 = 1
All of the xi are 1, so the loop test continues until the end. Since xt is 1, the function will return
TRUE. This is a failure!.
Suspect(3, 89):
n −1 = 88 = 8 ∗11 = 23 ∗11, therefore t = 3, u = 11
x0 = 311 mod 89 = 177147 mod 89 = 37
x1 = 372 mod 89 = 1369 mod 89 = 34
x2 = 342 mod 89 = 1156 mod 89 = 88
x3 = 882 mod 89 = 1 mod 89 = 1
Here we see the loop test again continue to the end. Since xt is 1, the function will return TRUE.
This is correct, because 89 is a prime number.
Sample Input
186 800000 900000
2 4000000000 4000001000
3 121 121
0 0 0
Sample Output
There are 42677 odd non-prime numbers between 800000 and 900000.
4 suspects fail in base 186:
821059
840781
873181
876961
There are 457 odd non-prime numbers between 4000000000 and 4000001000.
There are no failures in base 2.
There are 1 odd non-prime numbers between 121 and 121.
1 suspects fail in base 3:
121

------------------------------------------------------------

10957 So Doku Checker
The best logical puzzles often are puzzles that
are based on a simple idea. So Doku is one such
type of puzzle. Although So Dokus have been
around for some twenty years, in the last few
years they conquered the world exponentially.
Hundreds of newspapers and websites are now
publishing them on a daily basis. For those of
you unfamiliar with these puzzles, let me give
a brief introduction.
The picture above contains an example of
a Su Doku puzzle. As you can see, we have a
9×9grid filled with single digits from 1 to 9
and empty places. The grid is further divided
into nine 3×3sub-grids, indicated by the thick
lines. To solve the puzzle you have to fill the
empty places with digits according to the fol-
lowing rules:
• Every row should contain the digits 1 to
9 exactly once;
• Every column should contain the digits 1 to 9 exactly once;
• Every 3×3sub-grid should contain the digits 1 to 9 exactly once.
A well formed Su Doku can be solved with paper and pencil using logical deduction only. To be
well formed it should be legal (no row, column or sub-grid contains a digit more than once), solvable
(the empty places can all be filled while respecting the rules) and unique (there is only one solution).
This is what your program is going to check.
Input
The input contains several (partially) filled grids, each representing a Su Doku puzzle. For every puzzle
there are 9 lines with 9 digits giving the puzzle in row major order. Empty places in the puzzle are
represented by the digit ‘0’ (zero). Digits on a line are separated by one space. The grids are separated
by one empty line.
The first grid in the sample input represents the puzzle given in the picture.
Output
For every grid in the input, determine one of the following four verdicts:
• ‘Illegal’ if the puzzle violates one of the three rules;
• ‘Unique’ if only one solution exists;
• ‘Ambiguous’ if more than one solution exists;
Universidad de Valladolid OJ: 10957 – So Doku Checker 2/3
• ‘Impossible’ if no solution exists;
Print one line per grid, in the format: ‘Case < N >: < V ERDICT >.’, where N is the case
number, starting from 1, and V ERDICT is one of the four words in the list. See the sample output
for the exact format.
Note: an ‘Illegal’ puzzle is also ‘Impossible’, of course, but your program should print ‘Illegal’
in that case. Only print ‘Impossible’ if the input doesn’t violate one of the three rules, but the puzzle
still can’t be solved.
EPILOGUE (not required to solve the problem)
The (unique) solution to the given puzzle is:
1 5 3 9 8 4 7 6 2
8 4 2 7 3 6 1 5 9
6 9 7 5 1 2 8 3 4
2 3 8 6 7 1 4 9 5
9 7 4 3 2 5 6 1 8
5 1 6 8 4 9 3 2 7
7 6 5 4 9 3 2 8 1
3 8 1 2 5 7 9 4 6
4 2 9 1 6 8 5 7 3
If you are interested in the fascinating world of Su Dokus and solving them by hand, Google is a
good starting point. Also Wikipedia has a nice entry on Su Dokus describing their history and giving
some mathematical background.
Sample Input
0 0 3 9 0 0 7 6 0
0 4 0 0 0 6 0 0 9
6 0 7 0 1 0 0 0 4
2 0 0 6 7 0 0 9 0
0 0 4 3 0 5 6 0 0
0 1 0 0 4 9 0 0 7
7 0 0 0 9 0 2 0 1
3 0 0 2 0 0 0 4 0
0 2 9 0 0 8 5 0 0
0 0 3 9 0 0 7 6 0
0 4 0 0 0 6 0 0 9
6 0 0 0 1 0 0 0 4
0 0 0 6 7 0 0 9 0
0 0 4 0 0 5 6 0 0
0 1 0 0 4 9 0 0 0
7 0 0 0 9 0 2 0 1
3 0 0 2 0 0 0 4 0
0 2 0 0 0 8 5 0 0
0 0 3 9 0 0 7 6 0
0 4 0 0 0 6 0 0 9
6 0 7 0 1 0 0 0 4
Universidad de Valladolid OJ: 10957 – So Doku Checker 3/3
2 0 0 6 7 0 0 9 0
0 0 4 3 0 5 6 0 0
0 1 0 0 4 9 0 0 7
7 2 0 0 9 0 2 0 1
3 0 0 2 0 0 0 4 0
0 2 9 0 0 8 5 0 0
0 0 3 9 0 0 7 6 0
0 4 0 0 0 6 0 0 9
6 0 7 0 1 0 0 0 4
2 0 0 6 7 0 0 9 0
0 0 4 3 0 5 6 0 0
0 1 0 0 4 9 0 0 7
7 5 0 0 9 0 2 0 1
3 0 0 2 0 0 0 4 0
0 2 9 0 0 8 5 0 0
Sample Output
Case 1: Unique.
Case 2: Ambiguous.
Case 3: Illegal.
Case 4: Impossible.
------------------------------------------------------------

10958 How Many Solutions?
Given the values of three integers m, n, phow many integer solutions does the following equation have?
m
x+ n
y= 1
p
Input
The input file contains at most 1001 sets of inputs. Each set of input is given in a single line containing
three integers which denotes the values of m, nand prespectively.
Input is terminated by a case where the value of m, nand p(−1000 ≤m,n,p≤1000) is zero.
Output
For each set of input produce one line of output which contains the serial of output followed by an
integer Nwhich indicates how many solutions are there for the given value of m, nand p.
Comment: The equation corresponding to the first sample input is: 1
x+ 2
y= 1
4 and the 11 solutions
corresponding to this equation is:
-28 7
-12 6
-4 4
2 -8
3 -24
5 40
6 24
8 16
12 12
20 10
36 9
Sample Input
1 2 4
2 3 4
0 0 0
Sample Output
Case 1: 11
Case 2: 23

------------------------------------------------------------

10959 The Party, Part I
Don Giovanni likes to dance–especially with girls! And everyone else in the party enjoyed the dance,
too. Getting a chance to dance with the host (that is Don Giovanni) is the greatest honour; failing
that, dancing with someone who has danced with the host or will dance with the host is the second
greatest honour. This can go further. Define the Giovanni number of a person as follows, at the time
after the party is over and therefore who has danced with whom is completely known and fixed:
1. No one has a negative Giovanni number.
2. The Giovanni number of Don Giovanni is 0.
3. If a person p is not Don Giovanni himself, and has danced with someone with Giovanni number
n, and has not danced with anyone with a Giovanni number smaller than n, then p has Giovanni
number n + 1.
4. If a person’s Giovanni number cannot be determined from the above rules (he/she has not danced
with anyone with a finite Giovanni number), his/her Giovanni number is ∞. Fortunately, you
will not need this rule in this problem.
Your job is to write a program to compute Giovanni numbers.
Input
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs.
The first line has two numbers P and D; this means there are P persons in the party (including
Don Giovanni) and D dancing couples (P ≤ 1000 and D ≤ P (P −1)/2.) Then D lines follow, each
containing two distinct persons, meaning the two persons has danced. Persons are represented by
numbers between 0 and P −1; Don Giovanni is represented by 0.
As noted, we design the input so that you will not need the ∞rule in computing Giovanni numbers.
We have made our best effort to eliminate duplications in listing the dancing couples, e.g., if there is
a line “4 7” among the D lines, then this is the only occurrence of “4 7”, and there is no occurrence of “7
4”. But just in case you see a duplication, you can ignore it (the duplication, not the first occurrence).
Output
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.
Output P −1 lines. Line i is the Giovanni number of person i, for 1 ≤ i ≤ P −1. Note that it is
P −1 because we skip Don Giovanni in the output.
Sample Input
1
5 6
0 1
0 2
Universidad de Valladolid OJ: 10959 – The Party, Part I 2/2
3 2
2 4
4 3
1 2
Sample Output
1
1
2
2

------------------------------------------------------------

10960 The Party, Part II
In the middle of the party, Donna Anna, Donna Elvira, and Don Ottavio arrive masked, and intent to
confront Don Giovanni when they find him. You, as a guest of the party, know what they want to do.
You want to stay out of trouble, so you would like to keep away from them. But they mask themselves
along with other guests, and you have trouble identifying them. Fortunately, you have collected a set
of clues from other guests. You have to analyse them and find out who is who.
Input
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs.
The input starts with a line with 4 positive numbers, n, i, c, and u, separated by a space. n is the
number of people in the set of clues, i is the number of items (such as shoes, masks, clothes, etc.) that
can be identified by colours, c is the number of possible colours.
The rest of input consists of u lines of clues. There are three types of clues:
1. Same colour of item X = < list of people >
2. Colour Y for item X = < list of people >
3. Not colour Y for item X = < list of people >
The first clue means that the listed people have the same colour for item X; the second clue means
that colour of item X for the listed people is Y ; the last clue means that the colour of item X for the
listed people is not Y .
X is a number from 0 to i −1 inclusive, indicating the item number. Y is a number from 0 to c −1
inclusive, indicating the colour number. < list of people > is a list of capital letters in alphabetical
order, indicating the list of people that belongs to that clue. All words/letters in a line are separated
by a space.
There are at most 26 people (from A to Z), 10 items and 10 colours (from 0 to 9).
Output
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.
If the clues are inconsistent, or there is a contradiction, then output the line “Contradiction”,
otherwise output n lines, indicating the n people, in alphabetical order, the colour of their items in
increasing order:
P C0 C1 . . . Ci−1
for the person represented by letter P , where the colour number of item 0 is C0, the colour number of
item 1 is C1 , etc., all separated by a space. If the colour of an item cannot be determined, output “?”
for the colour number.
Universidad de Valladolid OJ: 10960 – The Party, Part II 2/2
Sample Input
2
4 2 3 6
Same colour of item 0 = A B D
Colour 2 for item 0 = B
Not colour 2 for item 1 = C
Not colour 1 for item 1 = C
Same colour of item 1 = C D
Same colour of item 1 = A D
4 2 3 7
Same colour of item 0 = A B D
Colour 2 for item 0 = B
Not colour 2 for item 1 = C
Not colour 1 for item 1 = C
Same colour of item 1 = C D
Same colour of item 1 = A D
Colour 1 for item 0 = D
Sample Output
A 2 0
B 2 ?
C ? 0
D 2 0
Contradiction

------------------------------------------------------------

10961 Chasing After Don Giovanni
In Act II, Masetto is leading a group of villagers to chase after Don Giovanni. Giovanni, who has just
exchanged his clothes with Leporello and is disguising as him, is asked by Masetto about where “his
master” has gone. To avoid trouble, “Leporello” (disguised by Giovanni) wants to mislead the villagers
so that they cannot find “Don Giovanni” (disguised by Leporello). Giovanni knows the route that
Leporello is taking, and he has a safe route (a route that the villagers would not meet Leporello) in
mind. He wants to make sure that the route he has is safe indeed.
Input
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs.
You are given the current location of Don Giovanni (which is also the location of Masetto and the
villagers), and the current location of Leporello, in two separate lines. Each line has two numbers: the
Street number and the Avenue number. You can assume that the roads are regular square grids, with
rows as streets numbered from one starting from the northmost, and columns as avenues numbered
from one starting from the westmost. Therefore the distance between adjacent streets and avenues is
always the same.
The rest of the input has two sets of routes, with the first set being Leporello’s and the second being
the route that Giovanni is going to tell the others. Each set starts with a number indicating the number
of stops in the route, followed by the list of stops. Each stop is specified as a location, where Leporello
may change direction. Between stops there is always a straight line in the direction of parallel to either
streets or avenues, which Leporello and the villagers are going to travel.
Leporello travels in the same speed as the villagers. You may assume the maximum street/avenue
number is 1000000, and there are at most 100 stops.
Output
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.
The output consists of a line saying ‘Yes’ or ‘No’, indicating whether the route that Giovanni is
telling the villagers is a safe route. Remember that a route is not safe only if the villagers can meet
Leporello in the same place at the same time; a route is safe even if the villagers meet Leporello at the
destination (because his mission is accomplished).
Sample Input
2
2 3
5 2
3
5 4
3 4
3 6
4
Universidad de Valladolid OJ: 10961 – Chasing After Don Giovanni 2/2
4 3
4 5
5 5
5 6
2 2
4 2
3
6 2
6 3
3 3
3
2 4
5 4
5 6
Sample Output
No
Yes

------------------------------------------------------------

10962 Don Giovanni’s Last Dinner
Don Giovanni eats large dishes–a lot of them. Leporello cannot help but drool over. Whenever Don
Giovanni gives up a dish, Leporello has a chance: he can have what remains on the dish behind the
back of the master, and surely he starts consuming it immediately. But he is a servant, and he has to
answer to demands from his master. It is going to be embarrassing if he is mouthful when the master
asks him questions.
Write a program to determine if Leporello is mouthful every time Don Giovanni calls him.
Input
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs.
The first line of the input contains Don Giovanni’s eating rate R, Leporello’s eating rate r, the
number of dishes N, and the number of calls C.
Then there are Nlines, each for a dish. Each line contains two numbers sand gwith s>g>0:s
is the amount of food on the dish, and gis the amount Don Giovanni consumes. Don Giovanni will eat
the dishes sequentially in the same order given by these nlines. As soon as Don Giovanni stops eating
a dish, it is handed to Leporello, and Don Giovanni starts the next dish right away. Leporello eats as
long as (and as soon as) there is food for him, and if you want to know, he eats the dishes sequentially
in the same order too.
Then there are Clines, each for a call. Each line contains a number tfor a time when Don Giovanni
calls Leporello. (Amazingly, these calls do not slow down Don Giovanni’s eating.) The sequence of call
times is increasing.
All input numbers are positive integers and at most 2000.
Output
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.
For each call, output a line
full
if Leporello is eating at the time of the call, and
clear
otherwise.
Boundary case: What if Leporello is just about to start or stop eating at a call time? E.g., he receives
food at 20, he finishes eating at 40, and at both times he gets called. In both cases, answer ‘full’.
(This also nicely handles the case when he finishes a dish at 35, he receives another dish at 35, and he
gets called at 35.)
Sample Input
1
10 7 5 4
Universidad de Valladolid OJ: 10962 – Don Giovanni’s Last Dinner 2/2
60 30
150 125
55 35
70 40
42 38
2
10
19
23
Sample Output
clear
clear
full
full

------------------------------------------------------------

10963 The Swallowing Ground
Now that the wicked is punished, there is still work to do. For example, the ground needs to seal itself
up. (Otherwise, good people will accidentally fall into Hell, which is not good.)
The ground swallowed Don Giovanni by collapsing: Part of the ground collapsed–fell off to Hell–and
this created a gap that swallowed Don Giovanni. The only way the ground can be fixed is by sliding
landmasses to close up the gap. Here is an example. The left diagram shows the ground with a ravine.
Assume that the ground extends infinitely to the north and to the south, and there are seams on the east
and west ends; so the northern block can slide southward, and the southern block can slide northward.
The right diagram shows the gap closed.
Here is another example. The ravine in the left diagram cannot be closed perfectly by sliding the
ground northward and southward. The right diagram shows the result of the best effort: there is still
a hole.
Write a program to determine if the gap can be closed. The ground is a grid with rows (a row runs
east-west) and columns (a column runs north-south). Holes are cells on the grid, and the gap consists
of holes.
Input
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs.
The first line contains the number of columns Wof the ground to be considered. Then Wlines
follow, specifying the boundary of the gap by columns: a line represents a column, and the order of
the lines follows the east-to-west order. Each line contains y1, the north-most row of the gap in this
column, and y2, the south-most row of the gap in this column. Row numbers are integers between -100
and 100 inclusive.
Universidad de Valladolid OJ: 10963 – The Swallowing Ground 2/2
The input specifies a valid gap: the holes separate the ground into exactly a northern block and a
southern block. There are no holes embedded inside a block. There are no islands.
Note: The sample input below corresponds to the first diagram.
Output
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.
Output the line
yes
if the gap can be closed by sliding blocks north and south; and
no
otherwise.
Sample Input
1
5
2 1
0 -1
1 0
1 0
2 1
Sample Output
yes

------------------------------------------------------------

10964 Strange Planet
As you know, there are many strange planets in the universe. Dara and Sara are living in one of these
strange planets with an unusual coordinate system. This Planet is like a grid having unit-sized cells
with the houses considered as points placed in the center of cells. The cells are assigned a unique
number as shown in figure 1.
. .
. 15 .
. 14 6 16 .
13 5 1 7 17
24 12 4 0 2 8 18
23 11 3 9 19
. 22 10 20 .
. 21 .
. .
Figure 1. The Strange Planet
Recently, Dara and Sara have become familiar with the well-known Cartesian coordinate system
based on X and Y axes, and would like to know the Euclidian distance between their houses. Unfor-
tunately, they don’t know how to calculate this distance. So, they need your help to calculate it. You
may assume that the cell with number 0 is located at the origin (with coordinate (0, 0)) of the Cartesian
coordinate system.
Input
Input file consists of many test-cases. Each test-case consists of two integers 0 ≤a,b≤1,000,000,000
indicating the cell numbers that contain their houses. The input will be terminated with a line con-
taining two -1’s.
Output
For each test-case, print the Euclidian distance between the houses of Dara and Sara rounded to two
digits after the fraction point.
Sample Input
2 7
29 32
-1 -1
Sample Output
1.00
4.24

------------------------------------------------------------

10965 Khepel’s Problem
Figure 1.Khepel trying to
solve the problem
Khepel (also known as James the Cat, see figure 1) is a handsome cat
starring in an old but well-known TV cartoon. He lives in an m ×n
rectangular garden with each cell being a unit-sized square. In order to
keep the grass of the garden green and beautiful, sprinklers are placed
in some of the cells. Each sprinkler can pour water in only one direction
at each time instance. They continue watering for p seconds in each
direction and then stop pouring water, rotate clockwise by 90 degrees
(which itself takes 1 second of time) and start pouring water in the new
direction. Also, each sprinkler has a specific range R which means that
it can pour water on up to R cells away from its position in its current
direction.
A warm sunny day, Khepel decided to take a nap. But as you know, cats do not like to get wet with
water. As a result, he asked you to help him. In other words, given the dimensions of his garden and
the coordinates, original configuration, and the values of p and R for each sprinkler, you must write a
program to calculate the number of cells in which he is able to sleep in his scheduled period of time
(note that Khepel can not sleep in a cell containing a sprinkler). You must assume that all sprinklers
start watering in their original direction in the beginning of time 0.
Input
Input consists of several test cases. The first line of each test case contains 3 integers 1 ≤m, n ≤100
(the dimensions of the garden), and 0 ≤k ≤1000 which is the number of sprinklers in it. The next k
lines each consist of 4 non negative integers ri,ci,pi,Ri and a character di. 1 ≤ri ≤m and 1 ≤ci ≤n
indicate the coordinates of the ith sprinkler in row-column format (with the upper leftmost cell having
having coordinates (1, 1)), 1 ≤pi ≤1, 000, 000 is its watering time in each direction, Ri ≥0 is its range,
and finally, di is a character which indicates the original direction of the sprinkler in the beginning of
time 0.
The possible values of di are ‘N’ (for north), ‘S’ (for south), ‘E’ (for east), and ‘W’ (for west).
The last line of each test case consists of two integers 0 ≤a ≤b ≤1, 000, 000, 000 indicating that
Khepel would like to sleep from the start of time a until the end of time b. Input is terminated with a
test case having n = m = k =O
Output
The output for each test case is a single integer which is the total number of cells in which Khepel is
able to sleep from the start of time a until the end of time b.
Sample Input
100 100 1
1 1 100 1 E
0 2
0 0 0
Sample Output
9998

------------------------------------------------------------

10966 3KP-BASH Project
Mohammad: I can’t continue. I give up!
Arash: Why?
Mohammad: cause I have read the obfuscated source-code of Unix BASH several times, and the more
I read the less I understand. Thats why I want to give up porting it to our own OS, 3KP.
Arash: Ok, Ok, just calm down. Let me think about it.
...After several minutes of thinking ...
Arash: Ok, why don’t we write our own BASH! Trust me! We just need a small subset of the
functionalities in the BASH. So, lets write our own version.
Mohammad: No! No! Youre kidding!
Poor Mohammad! He has a lot of tasks to do. Besides a pile of books to study for his exams, he
should also make some problems for the local programming contest of their university. Considering
these tasks, Mohammad wonders whether he is able to accomplish this new task ...
OK! Mohammad has found a solution. In fact, he has decided to out-source the 3KP-BASH project.
In other words, he would like to hire you as a professional programmer to write 3KP-BASH for him.
Problem Definition
The BASH environment for 3KP is intended to support only eight commands. The other function-
alities are decided to be available as stand-alone executable programs that can be run from our BASH
(Mohammad and Arash have already written the program execution codes, so you only have to add
support for these eight commands).
Before describing the supported commands, lets have a brief review of some basic things about 3KP
operating system.
• File System
– File: file is a simple object in this system. Each file has a name which is actually a string
consisting of English alphabetic characters, numeric characters, and ‘.’ (dot) character. A
filename cannot contain two consecutive ‘.’ characters. Also, the user cannot create a file
or directory with its name equal to a single ‘.’. A filename is no longer than 255 characters.
Note that filenames are case-sensitive. Each file has a size which is the amount of data in it.
The maximum allowed size for a file is 263. A file may also have some attributes. In the first
version of our BASH, we only need to know two of them which are directory and hidden
attributes.
– Directory: is simply a file with directory attribute and size of zero. In fact, a directory
is used as a logical place for keeping files. In other words, each directory may contain an
arbitrary number of files (or directories) inside it. An empty file system is assumed to have
only one directory which is called the Root Directory.
• Current Directory
At any time, there is a single directory which is assumed to be the default directory for programs
to use. This directory is called the Current Directory. When our BASH starts, it sets the current
directory to the root directory. A user may change the current directory during his works using
the facilities supplied by BASH.
Universidad de Valladolid OJ: 10966 – 3KP-BASH Project 2/4
• File and Directory Addressing
As you may know, there are many commands and programs which take a file or directory as their
input argument. So, we need to have a way to tell these programs exactly which file or directory
we would like them to perform some operations on. There are two methods for addressing a file
or directory:
– Full path addressing: In this method, all path elements are written from the root directory
with each two consecutive elements separated by a ‘/’ character. For example, suppose we
have a directory named ‘home’ in the root directory and inside ‘home’, there is another
directory named ‘acm’ which itself contains a directory or file named ‘uva’. Using full-path
addressing, we should write ‘[root]/home/acm/uva’ in order to address ‘uva’. For the sake of
simplicity, it is decided that ‘[root]’ should be omitted from the above phrase thus resulting
in ‘/home/acm/uva’ for full-path addressing ‘uva’.
– Relative Addressing: Suppose that in the above example, ‘acm’ has two directories named
‘uva’ and ‘avu’ and the user has set the current directory to ‘avu’. Now, if he/she wants to
address ‘uva’, in addition to full-path addressing, he has a simpler way which is by using
the string ‘../uva’. In other words, a directory name of ‘..’ indicates the parent directory of
the current directory or the parent directory of the directory which is listed in the address
string exactly before its occurrence. So, in the example above, ‘../..’ is equal to ‘/home’
and ‘../../../home/..’ is equal to the root directory. Theres also another directory name
‘.’ which means the current directory. So, again in the example above, assuming that the
current directory is ‘/home/acm,’ ‘./uva’ is equal to ‘/home/acm/uva’. Note that the user
have the choice to omit ‘./’ from this kind of addresses. So, ‘uva’ is exactly equal to ‘./uva’.
Now that we know enough about the file system and addressing, we can see what the commands
are.
Commands
Universidad de Valladolid OJ: 10966 – 3KP-BASH Project 3/4
Usage Description
cd path cd is the simplest command in our system. cd changes the current directory to path which is
a directory addressed using either full-path or relative addressing methods. If path does not
exist, the error message “path not found” should be printed in the standard output.
touch f ilename
[-size] [-h]
touch command is used to create or modify a file. f ilename is actually a path with its last
element equal to the name of the file to be created. All the elements of the path except the
last element should form a valid address to an existing directory and the last element should
be a valid filename. If the indicated filename does not exist in the indicated path, a new file
is created with its size equal to size argument of the command. If the argument is not given
then the size of the newly created file is assumed to be equal to zero. Also -h argument tells
the bash to set the hidden attribute for the newly created file. In the case that the given
filename already exists in the indicated path, the file should be deleted and recreated with
the new arguments.
In the case that the indicated path of the file to be created does not exist, touch command
should print the error message “path not found” on the standard output. And in the case
that there exists a directory in the indicated path with the same name as the file to be
created, the error message “a directory with the same name exists” should be printed on
the standard output.
mkdir path
[-h]
Creates a directory with the address equal to path argument. The last element of the address
is the name for the new directory. The other elements of the address should form a valid
address and should address an existing directory. In the case that these elements do not
meet these conditions, the error message “path not found” should be printed in the standard
output. Also, if a file or directory exists in the given path with the same name as the directory
to be created, the error message “file or directory with the same name exists” should
be printed on the standard output.
Note that if -h is specified as an argument, then the newly created directory is given the
hidden attribute.
find f ilename
[-r] [-h]
Searches for files or directories. f ilename should be a valid address with the last element
equal to the name of the file or directory to be searched for. The other elements of the address
should address an existing directory which is the directory to be searched or else the error
message “path not found” is printed on the standard output. If -r is specified then all of the
directories inside the given address should also be searched recursively. By default, find does
not search within the files or directories having the hidden attribute unless -h is specified as
an argument.
For each file or directory found with the specified name, exactly one line is printed in the
standard output containing the full-path of the file or directory, its size, the word hidden if
the hidden attribute is set for the file and the word dir if the directory attribute is set for the
file. All these properties should be separated by single space characters. The results should be
sorted by lexicographical order of full-path addresses which means that in order to compare
two files, the path elements of their full-path addresses are lexicographically compared to each
other from left to right.
In the case no such file or directory is found, the error message “file not found” should be
printed on the standard output.
ls [path]
[-h] [-r]
[-s] [-S]
[-f] [-d]
ls is a very popular command used to list the contents of [part of] the file system. In its
simplest form, ls does not take any arguments. In this case, all of the files and directories in
the current directory that do not have the hidden attribute are listed in a similar format to
that of find command. In the case there is no such file or directory in the current directory,
it prints the message “[empty]”.
If path is specified as an argument and is the address of an existing directory, then ls performs
its operation on path instead of the current directory.
Among the other arguments, if -h is specified, then the files and directories with hidden
attribute are also shown. In the case -r is specified, ls performs its operation on the directories
within the original directory to be searched recursively. If -s is specified, the results are first
sorted in non-decreasing order by size. There, in the case there are two files having the same
sizes, the two files should be ordered in a manner similar to find command.
As an argument, the functionality of -S is similar to -s instead of the fact that -S sorts the
files by size in non-increasing order. Argument -d forces ls to only show the directories in
the result while -f forces ls to only show the files that do not have the directory attribute.
pwd Prints the full-path address of the current directory on the standard output.
exit Terminates the session and exits BASH
grep “string” grep is a special command with a special usage form. In detail, it takes an string and searches
its standard input for all occurrences of that string and outputs all the lines of its standard
input that contain those occurrences on the standard output. In this special version of grep
in our BASH, the standard input can only be fed to it by the means of a technology named
piping. Piping is a technology that can be used to attach the standard output of one command
to the standard input of another one. In more details, all the outputs generated by the first
command are passed to the second command as standard input. Pipes can be used in the
form command1 | command2. Executing this phrase causes BASH to execute command1
first and then pass its standard output to command2 and execute command2 respectively.
So, to feed grep with some input, we should use pipes as stated above. For example, “ls |
grep "acm"” searches the result of ls command for any lines containing the word ‘acm’.
Universidad de Valladolid OJ: 10966 – 3KP-BASH Project 4/4
At last note that the mandatory arguments of all the commands should be passed with the specified
order but the optional arguments can be passed in any order. Any of the above commands if not used
according to the usage form specified, produce the error message ”bad usage“ on the standard output
e.g. if a command is passed extra or redundant arguments. Also, if a command is entered which is not
among the above commands, the error message “no such command” should be printed on the standard
output. Note that these two error messages cannot be piped to grep.
Now that you exactly know how our BASH works, in order to warm-up yourself for implementing
the real BASH, just write a program that simulates a chain of commands and produces outputs. It is
guaranteed that none of the commands have two (or more) type of errors simultaneously.
You are advised to read the sample input/output carefully to see how these commands work.
Input
Input consists of several work sessions. Each session consists of several lines, each containing a command
to be executed. Length of a line containing a command is no more than 2048 characters. Also, there
may be arbitrary number of space characters before and after the command and between its arguments.
Each session is terminated with an “exit” command. Input is terminated by end-of-file. You must
assume that in the beginning of each session, the default directory is the root directory and the file
system is empty.
Output
For each session, your program should produce the output of each command appearing on the input.
Sample Input
pwd
cd acm
mkdir ./acm
ls ./acm
cd acm
pwd
touch acm -h -1000
cd ..
cd /
grep
ls -r -s
ls -r -h
find acm -h -r | grep "1000"
exit
Sample Output
/
path not found
[empty]
/acm
bad usage
/acm 0 dir
/acm 0 dir
/acm/acm 1000 hidden
/acm/acm 1000 hidden

------------------------------------------------------------

10967 The Great Escape
Poor Kianoosh! 6 weeks since he was officially accepted as a citizen of Barareh and during this time
he has had nothing but Nochophskew for his breakfast, lunch and dinner. And nowadays, during the
nights, he dreams of nothing but a small piece of bread, some cheese and a glass of milk to have for his
breakfast. And during the days, he thinks of nothing but a great escape from this weird city in order
to turn his night-time dreams into reality.
After carefully checking all the potential ways out of the city, he concluded that there are only three
such possible ways. The first one is through the city gate which is of course guarded by fully-armed
guards, ready to kill any creature trying to go through the gate without permission. The second way
is passing through the northern walls of the city and going through a jungle which contains nothing
but those deadly snakes called NeshimanGazes (And be sure that Kianoosh does not like to repeat his
creepy experience with them again).
Finally, the third and the last (and of course the only feasible) way is passing through a secret door
in the famous so called HezarDaroon Castle (means a castle with thousands of doors). Unfortunately,
the problem with this castle is that no one actually knows the way to reach this secret door.
After spending some time gathering information about the castle, Kianoosh found out that HezarDa-
roon can actually be modeled as an m ×n grid with each cell representing a room in the castle. There is
always a door between two neighboring rooms but there are some rooms which contain a NeshimanGaz
ready to serve anyone trying to enter the room with its poisonous bites.
Figure 1. A Room containing a Rotating Door
There are also some rooms which contain
a rotating door. A rotating door is actually a
cylinder positioned at the center of the room
with a slice removed from it. In Figure 1, you
can see a room with a rotating door with its
removed slice facing towards west.
As it can be seen, one can only enter the
room from the neighbor to which the removed
slice is facing. And once Kianoosh enters the
room, he can rotate the door clockwise or
counter-clockwise in order to reach the other
doors in the room. For example, in the config-
uration of figure 1, if he rotates the door clock-
wise by 90 degrees, he can reach the door to
the north and if he continues rotating the door
by another 90 degrees in the same direction, he
can reach the door to east.
Another important fact about the rotating doors is that associated to each door is a number d which
is the amount of time, measured in seconds, that it takes for a normal human-being(like Kianoosh) to
rotate the door by 90 degrees. You may also assume that going from a room to its neighbor room takes
exactly 1 second.
Today, after spending a noticeable amount of money, Kianoosh managed to buy a map of the castle
from underground shops of Barareh. Taking a look at the map, he found that the entrance to the castle
is located at the lower-left corner and the secret door is located at the upper-right corner of the grid.
He can also see the position and the initial configuration of the rotating doors and the coordinates of
rooms containing the deadly NeshimanGazes to which Kianoosh does not like to enter.
Kianoosh is happy. He is only one step away from his dreams coming true. But how can he find his
Universidad de Valladolid OJ: 10967 – The Great Escape 2/2
way to the secret door? Yes! He needs help! And as a genius problem-solver, you should help him find
the path with the minimum required time to reach the secret passage from the lower-left corner of the
castle.
Input
The first line of the input contains an integer T ≤100 which is the number of test cases. Each test
case begins with a line containing 1 ≤n ≤100 (the number of rows) and 1 ≤n ≤100 (the number
of columns) followed by m lines, with the ith line containing n characters, the jth character of which
representing the status of the jth cell in the ith row of the grid (counted from north). Each character
may have six different values. A ‘.’ character represents a normal room while a ‘#’ represents a room
containing a NeshimanGaz and ‘N’, ‘W’, ‘E’, ‘S’ represent a room with a rotating door facing north, west,
east, and south respectively. The map is followed by D integers, the kth of which is equal to dkfor the
kth door, counting the doors from the north-west corner in a row major order. You can assume that
D (which is the number of rotating doors in the castle) is no more than 500, and the entrance (room
at lower-left corner) and the room containing the secret door (room at upper-right corner) does not
contain NeshimanGazes or rotating doors.
Output
For each test case, your program should output a line containing a single integer which is the minimum
amount of time required for Kianoosh to reach the secret door. In the case the secret door is not
reachable with respect to the given map and rules, a line containing the phrase ‘Poor Kianoosh’ should
be printed.
Sample Input
1
3 3
.#.
..W
...
10
Sample Output
14

------------------------------------------------------------

10968 KuPellaKes
In ancient times, many territories were under the control of a powerful king called Basm. Basm is
well-known in history because of his strange works and as a result, there are many history-lovers who
wish to know more about him. Koorosh is one of them and he has worked hard to find a way to know
more about Basms works.
Recently, he managed to invent a Time MachineTM and traveled to the past to Basm time in order
to be able to see and study his weird works thoroughly. Unfortunately, he has been caught by royal
guard soldiers of Basm and is now in his prison. Basm ordered him to solve a problem if he wants to stay
alive. King Basm wants to change the structure of roads of his newly captured territory, KuPellaKes
in such a way that each city has an even number of neighboring cities. Now, he wants to know the
minimum number of roads that should be destroyed in order to satisfy this condition. Note that each
city must have at least one neighbor city after the road destruction process. Also, It should be noted
that in the given territory at most two cites of KuPellaKes have an odd number of neighboring cities
and there is at most one road between two cities. Also, there is no road from a city to itself.
Input
Input consists of several test-cases. Each test-case starts with a line containing three numbers 1 ≤
n ≤1000, m indicating the number of cities and roads in KuPellaKes respectively. Next m lines, each
containing two numbers 1 ≤i, j ≤n indicating that there is a road between the ith and the jth city.
Note that all the roads are bidirectional. Input will be terminated with a line containing three zeros.
Output
For each test-case, your program should output the minimum number of roads that should be destroyed.
In the case that this task is impossible the phrase ‘Poor Koorosh’ should be printed.
Sample Input
4 5
1 2
2 3
3 4
4 1
1 3
0 0
Sample Output
1

------------------------------------------------------------

10969 Sweet Dream
Are you ready to have a sweet dream? OK! Close your eyes (Hey! Do NOT! I was kidding! How can
you read the problem statement with your eyes closed? Umm! Let me think ...Yes! There is a good
solution to this problem. Simply, hand this paper to your teammate and let him read it aloud for you)!
...You are standing in the middle of a room and you have a handful of discs of different sizes. They
are heavy. You somehow feel uncomfortable. Calm down and don’t worry! I am going to help you feel
comfortable again. Simply choose one of the discs in your hand randomly and drop it on the floor. Yes!
You feel a little more comfortable. Choose and drop another! Then another one! ...And continue this
process until your hands are empty. Now, you are as light as a feather and you are ready to fly away
...
Figure 1. A Room containing a Rotating
Door
But don’t be so quick! Before flying away, you should
solve a problem. Open your eyes and take a look at the
floor. You see the discs youve just dropped (To the team-
mate reading this problem aloud: Show the contents of
figure 1 to your teammate who is going to open his eyes
now).
You can see that some discs are partially (or totally)
covered by other discs. Your job is to compute the total
perimeter of parts of the discs that you can see from the
above.
Umm! I think you feel a little bit uncomfortable again.
Am I right?
Input
The first line of input contains a single integer T≤100 which is the number of test cases. Each test
case starts with a single integer N≤100, the number of discs originally in your hand followed by N
lines, the kth of which containing three floating-point numbers which are rk≤100,000, radius of the
kth disc and −100,000 ≤xk,yk≤100,000 the coordinates of the point on the floor on which the disc
has fallen. Two floating-point numbers are assumed to be equal if their absolute difference is less than
10−10
Output
Output for each test case consists of a line containing a floating-point number which is the total
perimeter of part of discs that can be seen from above rounded to 3 decimal digits after the fraction
point. The number should have exactly 3 digits after the fraction point.
Sample Input
3
1
10 0 0
2
5 0 0
10 0 0
2
Universidad de Valladolid OJ: 10969 – Sweet Dream 2/2
1 0 0
1 1 0
Sample Output
62.832
62.832
10.472

------------------------------------------------------------

10970 Big Chocolate
Figure 1. Mohammads chocolate
Mohammad has recently visited Switzerland. As he loves
his friends very much, he decided to buy some chocolate
for them, but as this fine chocolate is very expensive (You
know Mohammad is a little BIT stingy!), he could only
afford buying one chocolate, albeit a very big one (part of
it can be seen in figure 1) for all of them as a souvenir.
Now, he wants to give each of his friends exactly one part
of this chocolate and as he believes all human beings are
equal (!), he wants to split it into equal parts.
The chocolate is an M×Nrectangle constructed from
M×Nunit-sized squares. You can assume that Mohammad
has also M×Nfriends waiting to receive their piece of
chocolate.
To split the chocolate, Mohammad can cut it in vertical
or horizontal direction (through the lines that separate the squares). Then, he should do the same with
each part separately until he reaches M×Nunit size pieces of chocolate. Unfortunately, because he is
a little lazy, he wants to use the minimum number of cuts required to accomplish this task.
Your goal is to tell him the minimum number of cuts needed to split all of the chocolate squares
apart.
Input
The input consists of several test cases. In each line of input, there are two integers 1 ≤M≤300, the
number of rows in the chocolate and 1 ≤N≤300, the number of columns in the chocolate. The input
should be processed until end of file is encountered.
Output
For each line of input, your program should produce one line of output containing an integer indicating
the minimum number of cuts needed to split the entire chocolate into unit size pieces.
Sample Input
2 2
1 1
1 5
Sample Output
3
0
4

------------------------------------------------------------

10971 Building Construction
Figure 1. Shape of a
block
According to recent activities in the Computer Engineering department, ACM
(Association for Construction Management) has signed a contract with the
department to build some pre-constructed blocks which can be attached to
each other and easily form a building.
These blocks are cubes and have facilities for being attached to other
blocks face to face. The problem is that these connecting facilities are not
the same. Each of the 6 faces of a block has its own type of connector named
1 to 6 respectively, as shown in figure 1. To connect two cubes to each other,
their adjacent faces must have the same connector type or the sum of their
connector numbers must be equal to 7.
Figure 2. A 3 ×3 ×3 Construction
Faculty will give ACM a map for constructing the build-
ing. The building is actually an M×N×K rectangular
prism. Furthermore, faculty has decided to have some of
the blocks on some faces of the prism fixed. In other words,
some of the blocks on the faces of the prism must have a pre-
determined connector facing outside. Given a map for the
building to be constructed, you must help ACM to decide
whether it can build the requested building with respect to
the limitations of the problem or not.
Input
The first line of the input file consists of a single integer
1 ≤T≤10,000 , the total number of test cases. For each
test case, there is a line indicating 1 ≤M,N,K≤10. After
this line, comes the description of each face of the whole
building. Each number shows that which face of a block must be seen in that position. Whenever a ‘?’
is represented, it means there is no difference in which face of the block to be used there. Only 3 faces
of the whole prism are given. First you will see K rows each one with Ncolumns, representing face T
(top face of the building). Then, there is Mrows each one with Ncolumns, representing face F (front
face) and at last, there is Mrows each one with K columns, representing face R (right side face). The
order each face is introduced is the same as figure 2.
Output
For each line of input, simply write ‘YES’ if it is possible to arrange blocks in some way which fits in
the conditions of the input or write ‘NO’ if it is not possible.
Sample Input
1
2 2 2
11
11
22
22
Universidad de Valladolid OJ: 10971 – Building Construction 2/2
33
3?
Sample Output
YES

------------------------------------------------------------

10972 RevolC FaeLoN
Hopefully, you can remember Koorosh from one of the previous problems. Fortunately, Koorosh has
solved Basm’s problem without your help! Now, he is a high-ranked advisor of Basm.
As usual, Basm has conquered a new territory, called RevolC FaeLoN. In order to make the people
of RevolC FaeLoN satisfied, he wants to solve one of their basic problems. The RevolC FaeLoN has a
high annual rate of camel accidents and Basm wants to make the roads of this territory unidirectional
in order to reduce the accident rate.
He wants to do this task in such a way that each city has at least one path to every other city.
Now, Basm has asked Koorosh to find the minimum number of unidirectional roads which need to be
constructed (in addition to the task of making the existing roads unidirectional) in order for every city
to be reachable from every other city. Note that the original graph representing the territory is simple
but during the road construction process, extra roads can be constructed between two cities that have
already been connected to each other by a road.
Input
Input consists of several test-cases. Each test case begins with two numbers 1 ≤n≤1000 and mwhich
are the number of cities and roads of RevolC FaeLoN respectively. The next mlines, each contain two
integers 1 ≤u,v≤1000, indicating that there is a road between uand v. The input is terminated by
end of file.
Output
For each test-case, print the minimum number of roads that should be constructed to make Basm’s
decision possible.
Sample Input
3 2
1 2
2 3
10
11
1 2
2 3
3 1
3 7
4 5
5 6
6 4
7 9
6 3
9 8
7 8
Sample Output
1
Universidad de Valladolid OJ: 10972 – RevolC FaeLoN 2/2
2

------------------------------------------------------------

10973 Triangle Counting
Having a simple undirected graph G = (V, E), a triangle is defined as a triple (v1, v2, v3) where
v1, v2, v3 ∈V and (v1, v2) ∈E for all 1 ≤i, j ≤3 and i ̸= j. In this problem, you are given an
undirected graph and asked to count all the triangles in this graph. You are assured that there is no
edge in this graph that is the member of more than 2 triangles.
Input
The first line of input contains an integer T ≤250, which is the number of test cases. Each test case
begins with a line containing two integers 1 ≤n ≤3000 and m which are the number of vertices and
the number of edges in the graph respectively. The next m lines contain two integers 1 ≤i,j ≤3000
indicating that there is an edge between vertex i and vertex j.
Tip for C++ Programmers: Any attempt to use ifstream to read the input will exceed the time
limit for this problem. Use scanf instead.
Output
Output for each test case consists of one line containing the number of triangles in the specified graph
of the test case.
Sample Input
1
4 6
1 2
2 3
3 1
1 4
2 4
3 4
Sample Output
4

------------------------------------------------------------

10974 The Ridiculous Game
Figure 1. A polygon cut into 4 pieces
Mohammad likes playing with scissors and pa-
pers. Recently, he has found a ridiculous geo-
metric game in one of the ancient books of the
Barareh city. He should start with a simple
polygon paper and cut it with scissors along a
specified direction. Finally, he should specify
the shape of the resulted pieces of papers. The
polygon shown in figure 1 is a polygon which is
cut into 4 pieces. But, Mohammad thinks that
this game is very ridiculous and boring, as af-
ter cutting the paper, you can see the resulted
pieces!!! Therefore, he decided to make it a lit-
tle bit amazing. Now, he wants to write a com-
puter program to find the shape of the resulted
pieces without actually cutting the paper.
After reading previous problems, you prob-
ably know that Mohammad is very lazy and he
needs your help to accomplish this task.
Input
The input consists of several test cases. The
first line of each test case contains a single in-
teger 3 ≤n≤1,000, the number of vertices of polygon. Next nlines each contain two real numbers.
These numbers indicate the coordinates of vertices of the polygon in counter-clockwise order. The last
line of each test case contains four real numbers x1,y1,x2,y2 which indicate two distinct points of the
cutting line. The input will be terminated by a test case with nequal to 0.
Output
For each test case, your program must output a line containing the phrase “Test Case #k”, in which k
shows the index of current test case, starting from 1. In next line, the program must output an integer
P, the number of resulted polygons after cutting. The next Plines each should describe the coordinates
of a resulting polygon with each two consecutive numbers separated by exactly one space character.
The vertices of each polygon should be printed in counter-clockwise order with the first vertex being the
vertex with the lowest and leftmost (among the vertices with the lowest) coordinates. Also considering
the output for each polygon as a sequence of floating-point numbers, the polygons should be output
lexicographically i.e. the polygon having a lexicographically smaller sequence of floating-point numbers
should be output first and so on. There should be a blank line between the outputs of two consecutive
test-cases.
For this problem please note that:
1. Two floating-point numbers are considered equal if their absolute difference is less than ε= 10−8
2. Each number should be printed with exactly 5 digits after the fraction point.
3. The polygons appearing in the output should not have any 3 consecutive vertices that are colinear.
Universidad de Valladolid OJ: 10974 – The Ridiculous Game 2/2
4. The given cutting line, can lay on edges of the given polygon.
Sample Input
7
10 0
10 6
8 10
5 6
2.5 11
0 6
0 0
10 6 -10 6
0
Sample Output
Test Case #1
3
0.00000 0.00000 10.00000 0.00000 10.00000 6.00000 0.00000 6.00000
0.00000 6.00000 5.00000 6.00000 2.50000 11.00000
5.00000 6.00000 10.00000 6.00000 8.00000 10.00000

------------------------------------------------------------

10975 Dueue’s Quiz
Hesam Dueue Bararie is the showman of a very popular TV quiz: “Bararian Nights”. In this quiz, there
is a big table of letters with some words hidden in it among diagonal, vertical or horizontal directions.
During the quiz, Dueue tells each one of the contestants a word and they must find the total number
of occurrences of that word in the table.
Figure 1. Dueue’s Table
Recently, Milk-Farhaad has decided to participate in this TV
quiz and because cheating is permitted during this quiz (!), he
wants you to help him by writing a computer program.
By the way, Milk-Farhaad has bought the whole dictionary
and configurations of the table from Dueue. All he need is a com-
puter program which calculates the total number of occurrences
for each word of the dictionary in the table.
You can see one sample of this table in figure 1. All occur-
rences of the word “hello” are circled in that. Also, the total
number of occurrences of the word “madam” is equal to 2 be-
cause it must be counted twice: one from left to right and the
other one from right to left.
Input
The first line of the input file is an integer 1 ≤T ≤10 which is the number of test cases. The first
line of each test case is an integer 1 ≤D ≤15, 000 which is the number of words in the dictionary that
should be used for this test case. After that, comes D lines each of which containing a word, having
length of no more than 1000 characters, in the dictionary. Words are all constructed from lowercase
letters: a . . . z.
Then, comes a line containing an integer 1 ≤Q ≤100 , the total number of queries for the test
case. For each query, there will be two integers 1 ≤M , N ≤100 which are the number of rows and the
number of columns of the table respectively. Next, there are M lines each one containing N characters
representing the configuration of each table of the quiz.
Output
For each test case, your program should write a line with the phrase ‘Test Case #i’ in which i is the
index of the current test case starting from 1. Then comes the answer for each query in that test case.
The answer to each query starts with a line containing the phrase ‘Query #j’. Then, all the words from
dictionary which actually occurred in the table of that query should be listed one in each line (or each
in one line!) together with their total number of occurrences in the given table. These words must be
sorted in alphabetical order. There should be an empty line after the output for each test case.
Sample Input
1
4
hello
bye
one
two
Universidad de Valladolid OJ: 10975 – Dueue’s Quiz 2/2
2
3 3
bye
okk
res
3 3
one
wzq
too
Sample Output
Test Case #1
Query #1
bye 1
Query #2
one 1
two 1

------------------------------------------------------------

10976 Fractions Again?!
It is easy to see that for every fraction in the form 1
k(k>0), we can always find two positive integers
xand y, x≥y, such that:
1
k= 1
x+ 1
y
Now our question is: can you write a program that counts how many such pairs of xand ythere
are for any given k?
Input
Input contains no more than 100 lines, each giving a value of k(0 <k≤10000).
Output
For each k, output the number of corresponding (x,y) pairs, followed by a sorted list of the values of x
and y, as shown in the sample output.
Sample Input
2
12
Sample Output
2
1/2 = 1/6 + 1/3
1/2 = 1/4 + 1/4
8
1/12 = 1/156 + 1/13
1/12 = 1/84 + 1/14
1/12 = 1/60 + 1/15
1/12 = 1/48 + 1/16
1/12 = 1/36 + 1/18
1/12 = 1/30 + 1/20
1/12 = 1/28 + 1/21
1/12 = 1/24 + 1/24

------------------------------------------------------------

10977 Enchanted Forest
You are Ash, the famous Pokemon trainer. To become the greatest Pokemon master, you travel through
regions battling against gym leaders and entering Pokemon League competitions. With your well-
trained Pikachu, Squirtle and Bulbasaur, you have already captured six badges! What a marvellous
performance!
Now, you are walking through the Enchanted Forest, where the most powerful Pokemons live...
No, not those giant dragons; we are actually talking about Jigglypuffs. A Jigglypuff is a normal-type
Balloon Pokemon, with a round, balloon-like body, a tuft of fur on its forehead, and stubby arms and
legs. What’s so powerful of them? Well, do you notice that microphone in the picture? That’s right,
Jigglypuff has a well-regarded singing voice, and its most popular attack is to sing its opponent to
sleep! Therefore, it is always a good idea to find a route avoiding places wherever you might hear the
Jigglypuffs’ lullaby.
Let us model the situation as follows: we shall treat the forest
as a rectangular grid formed by paths which are 1 unit apart.
Your starting position is at the top left corner of the grid (1, 1),
and you will leave the forest at the lower right corner (R,C).
There might be blocked areas which you are not allowed to tres-
pass through. Jigglypuffs might be present at some intersections.
The loudness Lof each Jigglypuff is given, which means that
places no more than Lunits away from the Jigglypuff are consid-
ered “dangerous” and should be avoided.
Input
Input consists of several test cases. Each test begins with two
integers Rand C(1 ≤R,C≤200), the number of rows and
columns in the grid map. Then comes an integer m, followed by mlines each giving the coordinates of
a blocked position. Next there is an integer n(0 ≤n≤100), the number of Jigglypuffs in the forest.
The following nlines each gives the position of a Jigglypuff and its loudness L(1 ≤L≤100).
Input ends with a test case where R= 0 and C= 0. You must not process this test case.
Output
For each case, if some “dangerous” places are unavoidable, print ‘Impossible.’ Otherwise, give the
length of the shortest path to get out of the forest safely.
The figure on the right shows the sample test case. The area enclosed by the blue circle is “danger-
ous”. The solution shown is unique.
Sample Input
5 5
5
1 2
1 3
1 4
1 5
2 5
Universidad de Valladolid OJ: 10977 – Enchanted Forest 2/2
1
4 3 1
0 0
Sample Output
8

------------------------------------------------------------

10978 Let’s Play Magic!
You have seen a card magic trick named “Spelling Bee”. The process goes as follows:
1. The magician first arranges 13 cards in a circle, as shown in the figure below.
2. Starting from the marked position, he counts the cards clockwisely, saying “A–C–E”.
3. He turns the card at the “E” position, and... it is an Ace!
4. Next, he takes away the Ace and continues to count the cards, saying “T–W–O”.
5. He turns over the card at position “O” ... it is a Two!!
6. He continues to do this with the rest of the cards from Three to King. :-)
Now, how does the magician arrange the cards?
Universidad de Valladolid OJ: 10978 – Let’s Play Magic! 2/2
Input
Input consists of several test cases. Each case begins with an integer N(1 ≤N≤52), the number of
cards to be used in the magic trick. The following Nlines show the order of the turning-over of the
cards and the words to be spelt. None of the words will have more than 20 characters. The format for
each card is a string with two characters: first the value, and second the suit.
Input ends with a test case where N= 0. This test case should not be processed.
Output
For each case, your program should output the initial arrangement of the cards.
Sample Input
13
AS ACE
2S TWO
3S THREE
4C FOUR
5C FIVE
6C SIX
7D SEVEN
8D EIGHT
9D NINE
TH TEN
JH JACK
QH QUEEN
KH KING
0
Sample Output
QH 4C AS 8D KH 2S 7D 5C TH JH 3S 6C 9D

------------------------------------------------------------

10979 How many triangles?
How many triangles are there in the following figure?
... ding! Time’s up. The answer is 29.
Given at most 10 line segments, you are to write a program that counts the number of triangles
bounded by them. Note that three colinear points do not make a triangle.
Input
Input consists of several test cases. Each case begins with a line containing an integer N(3 ≤N≤10).
The following Nlines each gives four integers, x1, y1, x2 and y2, meaning that you draw a straight line
segment from (x1,y1) to (x2,y2). All the coordinates given have their absolute values no greater than
100.
Input is terminated by EOF.
Output
For each case, output the number of triangles bounded by the Nlines.
Sample Input
10
-5 4 5 -4
Universidad de Valladolid OJ: 10979 – How many triangles? 2/2
-5 4 -6 -1
-5 -3 -1 4
-5 -3 5 3
-5 -3 7 0
-1 4 6 -2
0 0 6 -2
6 -2 5 3
7 0 5 -4
-6 -1 3 -1
Sample Output
29

------------------------------------------------------------

10980 Lowest Price in Town
It is sometimes tricky to figure out the cheapest way to buy things, even in the supermarket where the
price of all goods are listed clearly. Just consider what I saw last Saturday about the price of cooking
oil: (notice the difference in the sizes of the two price tags)
Having a sharp mind (a consequence of regularly taking part in online programming contests), you
should have no problem in seeing that the ‘buy-1-get-1-free’ scheme is preferable. But what about your
Mum? It is your responsibility as her son/daughter to write her a program that computes the lowest
price to buy things in the supermarket, thus helps her to save money.
Input
The input consists of more than a hundred test cases, each concerning a different item. The first line of
each case gives the unit price of buying an item, then a non-negative integer M(≤20). This is followed
by Mlines each containing two numbers Nand P(1 <N≤100), which means that you can buy N
such items for $P. Finally there is a line containing a list of positive integers K(≤100).
Output
For each of them your program should print the lowest price you need to get K items. Note that you
do not have to buy exactly K items; you may consider buying more than K items, and giving the
unneeded items to your dear neighbours, if you can save money in this way.
Note that all prices Pgiven in the input are floating-point numbers in exactly 2 decimal places,
with 0 <P<1000.
Sample Input
22.00 2
2 22.00
4 60.00
2 4
25.00 2
2 48.00
2 46.00
2
22.00 2
2 22.00
Universidad de Valladolid OJ: 10980 – Lowest Price in Town 2/2
4 40.00
1 2 3
Sample Output
Case 1:
Buy 2 for $22.00
Buy 4 for $44.00
Case 2:
Buy 2 for $46.00
Case 3:
Buy 1 for $22.00
Buy 2 for $22.00
Buy 3 for $40.00

------------------------------------------------------------

10981 String Morphing
There is a special multiplication operator such that
Table of special multiplication operation
Thus ab=b, ba=c, bc=a, cb=c, ...
For example, you are given the string bbbba and the character a,
(b(bb))(ba) = (bb)(ba) [as bb = b]
= b(ba) [as bb = b]
= bc [as ba = c]
= a [as bc = a]
By adding suitable brackets, bbbba can produce a according to the above multiplication table.
You are asked to write a program to show the morphing steps of a string into an expected
character, or otherwise, output ‘None exist!’ if the given string cannot be morphed as expected.
Input
The first line of the input file gives the number of test cases. Each case consists of two lines. The first
line is the starting string which has at most 100 characters. The second line is the target character. All
characters in the input are within the range of a-c.
Output
For each test case, your output should consist several lines, showing the morphing steps of a string into
the character. In case there are more than one solution, always try to start the morphing from the left.
Print a blank line between consecutive sets of output.
Sample Input
2
bbbba
a
bbbba
a
Universidad de Valladolid OJ: 10981 – String Morphing 2/2
Sample Output
bbbba
bbba
bba
bc
a
bbbba
bbba
bba
bc
a

------------------------------------------------------------

10982 Troublemakers
[after seeing that the room is on fire; Ted has a needle
in his hand while holding the leg of a dead woman; Sara
has a bottle of champagne in her hand, and Juancho is smoking]
Man: Did they misbehave?
Robert Rodrigues, “The Misbehavers.”
Every school class has its troublemakers — those kids who can make the teacher’s life miserable.
On his own, a troublemaker is manageable, but when you put certain pairs of troublemakers together in
the same room, teaching a class becomes very hard. There are nkids in Mrs. Shaida’s math class, and
there are mpairs of troublemakers among them. The situation has gotten so bad that Mrs. Shaida has
decided to split the class into two classes. Help her do it in such a way that the number of troublemaker
pairs is reduced by at least a half.
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with a line
containing n(0 ≤n≤100) and m(0 <m<5000). The next mlines will contain a pair of integers u
and vmeaning that when kids uand vare in the same room, they make a troublemaker pair. Kids are
numbered from 1 to n.
Output
For each test case, output one line containing ‘Case #x:’ followed by L— the number of kids who
will be moved to a different class (in a different room). The next line should list those kids. The total
number of troublemaker pairs in the two rooms must be at most m/2. If that is impossible, print
‘Impossible.’ instead of Land an empty line afterwards.
Sample Input
2
4 3
1 2
2 3
3 4
4 6
1 2
1 3
1 4
2 3
2 4
3 4
Sample Output
Case #1: 3
1 3 4
Case #2: 2
1 2

------------------------------------------------------------

10983 Buy one, get the rest free
“Whoa! It feels like I’m flying!”
Lrrr
It’s year 2258, and the age of airplanes is coming to an end. Everyone is using teleporters now. In
an effort to stay competitive, the last remaining air travel company, GetsJo, is offering the following
deal to its customers. Instead of buying one plane ticket, you can rent a whole flight from A to B. Each
flight can carry a certain number of people and costs a certain amount of money. If you do that, then
you can rent all of the other flights of equal or lesser cost for free!
For example, if there are 4 flights with costs $10000, $25000, $30000 and $40000, and you rent the
$30000 flight, then you get the $10000 and $25000 flights for free. The total cost to rent these 3 flights
is $30000.
You want to organize a large programming competition and would like to invite all of the participants
to city n, where the competition will be held. Being a nice person, you decide to pay for everyone’s
airplane tickets. Given the locations of the participants and the list of available flights between now
and the day of the competition, what is the cost of renting enough flights to get all of the participants
to city n in the next d days?
Input
The first line of input gives the number of cases, N . N test cases follow. Each one starts with a line
containing the number of cities (1 ≤n ≤30), the number of days (1 ≤d ≤10) until the competition
and the number of flights (0 ≤m ≤1000). m lines follow, each one containing 5 integers: u, v, c, p
and e (1 ≤u, v ≤n, 1 ≤c ≤100, 0 ≤e < d). This means that a flight that can carry c passengers and
costs p dollars leaves city u on day e in the evening and arrives next day in the morning to city v. Day
0 is today, and all of the participants need to be in city n in the evening of day e. Finally, n integers
(z1, z2, . . . , zn) follow, meaning that there are zi participants in city i on day 0 (0 ≤zi ≤100). The
maximum cost of a flight is 100000. There will never be two flights with the same u, v and e values.
Output
For each test case, output one line containing ‘Case #x:’ followed by the minimum required cost of
flying all of the participants to city n before the end of day d. If no amount of money is enough, print
‘Impossible’ instead.
Sample Input
2
5 4 5
1 5 100 30000 0
2 4 10 10000 0
2 4 10 10000 1
4 5 25 25000 2
2 5 100 40000 3
1 20 0 5 100
2 1 1
1 2 99 10400 0
100 0
Universidad de Valladolid OJ: 10983 – Buy one, get the rest free 2/2
Sample Output
Case #1: 30000
Case #2: Impossible

------------------------------------------------------------

10984 Double NP-hard
“Name and Class Year:
Course to be Covered: (Course Number and Title)
Reason for covering the course independently:”
Hamilton College Application for Independent
Coverage of Course Work
Definitions
In this problem, a graph is a set of nvertices together with a set of medges, where an edge is an
unordered pair of different vertices (edges are undirected). The two vertices that comprise an edge are
said to be that edge’s endpoints. A vertex cover of a given graph G is a subset C of its vertices, such
that each edge of G has at least one of its endpoints in C. An independent set of a given graph G is a
subset S of its vertices, such that no edge of G has both of its endpoints in S.
The problem of finding a minimum vertex cover (that is, a vertex cover of the smallest possible size)
for any graph is NP-hard. The problem of finding a maximum independent set of any graph is also
NP-hard. That is a formal way of saying that no one knows whether there exists an algorithm that
runs in time polynomial in nand solves any one of the two problems.
We want to define a class of problems that are even harder than the NP-hard problems. We are
going to call them “Double NP-hard”! Your job is to solve the first Double NP-hard problem.
Problem
Given a graph G, find a subset C of its vertices that is both a minimum vertex cover and a maximum
independent set.
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with two lines
containing n(0 ≤n≤1000) and m(0 ≤m≤100000) as above. The next mlines will each describe
an edge of G as a pair of different vertices, which are numbered from 1 to n.
Output
For each test case, output one line containing ‘Case #x:’ followed by either ‘Impossible’ if there is
no answer or the size k of the set C. In the latter case, on the next line, print the k vertices of C in
increasing order, separated by spaces. If there are multiple answers, print the lexicographically smallest
one.
Sample Input
4
2
1
1 2
0
0
10
0
4
Universidad de Valladolid OJ: 10984 – Double NP-hard 2/2
4
1 2
2 3
3 4
4 1
Sample Output
Case #1: 1
1
Case #2: 0
Case #3: Impossible
Case #4: 2
1 3

------------------------------------------------------------

10985 Rings’n’Ropes
“Well, that seems to be the situation. But,
I don’t want that, and you don’t want that,
and Ringo here definitely doesn’t want that.”
Jules Winnfield
I have ntiny rings made of steel. I also have mpieces of rope, all of exactly the same length. The
two ends of each piece of rope are tied to two different rings.
I am going to take one of the rings, L, into my left hand, and another ring, Rinto my right
hand. Then I will pull the whole structure apart as hard as I can. Some of the ropes will be streched
horizontally because of this. Others will hang down or bend out of shape. If I want the number of
horizontally stretched ropes to be as large as possible, which Land Rshould I pick?
Assume that the stretching of ropes in negligible, they all have negligible thickness and are free to
slide around the rings that they are tied to. The thickness and radius of each ring is negligible, too.
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with two lines
containing n(2 ≤n≤120) and m(0 ≤m≤n(n−1)/2). The next mlines will each contain a pair
of different rings (integers in the range [0,n−1]). Each pair of rings will be connected by at most one
rope.
Output
For each test case, output the line containing ‘Case #x:’, followed by the largest number of ropes that
I can stretch horizontally by picking a pair of rings, Land R.
Sample Input
4
2
1
0 1
3
3
0 1
1 2
2 0
6
6
0 1
0 5
1 3
5 4
3 2
4 2
6
7
Universidad de Valladolid OJ: 10985 – Rings’n’Ropes 2/2
0 1
0 5
1 3
1 4
5 4
3 2
4 2
Sample Output
Case #1: 1
Case #2: 1
Case #3: 6
Case #4: 7

------------------------------------------------------------

10986 Sending email
“A new internet watchdog is creating a stir in
Springfield. Mr. X, if that is his real name, has
come up with a sensational scoop.”
Kent Brockman
There are nSMTP servers connected by network cables. Each of the mcables connects two com-
puters and has a certain latency measured in milliseconds required to send an email message. What
is the shortest time required to send a message from server Sto server Talong a sequence of cables?
Assume that there is no delay incurred at any of the servers.
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with a line
containing n(2 ≤n≤20000), m(0 ≤m≤50000), S(0 ≤S<n) and T(0 ≤T<n). S̸= T. The
next mlines will each contain 3 integers: 2 different servers (in the range [0,n−1]) that are connected
by a bidirectional cable and the latency, w, along this cable (0 ≤w≤10000).
Output
For each test case, output the line ‘Case #x:’ followed by the number of milliseconds required to send
a message from Sto T. Print ‘unreachable’ if there is no route from Sto T.
Sample Input
3
2 1 0 1
0 1 100
3 3 2 0
0 1 100
0 2 200
1 2 50
2 0 0 1
Sample Output
Case #1: 100
Case #2: 150
Case #3: unreachable

------------------------------------------------------------

10987 AntiFloyd
“There is nothing new under the sun but
there are lots of old things we don’t know.”
Ambrose Bierce
You have been hired as a systems administrator for a large company. The company head office has n
computers connected by a network of m cables. Each cable connects two different computers, and there
is at most one cable connecting any given pair of computers. Each cable has a latency, measured in
micro-seconds, that determines how long it takes for a message to travel along that cable. The network
protocol is set up in a smart way, so that when sending a message from computer A to computer B, the
message will travel along the path that has the smallest total latency, so that it arrives at B as soon as
possible. The cables are bi-directional and have the same latency in both directions.
As your first order of business, you need to determine which computers are connected to each other,
and what the latency is along each of the m cables. You soon discover that this is a difficult task because
the building has many floors, and the cables are hidden inside walls. So here is what you decide to do.
You will send a message from every computer A to every other computer B and measure the latency.
This will give you n(n −1)/2 measurements. From this data, you will determine which computers are
connected by cables, and what the latency along each cable is. You would like your model to be simple,
so you want to use as few cables as possible.
Input
The first line of input gives the number of cases, N (at most 20). N test cases follow. Each one
starts with a line containing n (0 < n < 100). The next n −1 lines will contain the message latency
measurements. Line i will contain i integers in the range [1, 10000]. Integer j is the amount of time it
takes to send a message from computer i + 1 to computer j (or back).
Output
For each test case, output a line containing ‘Case #x:’. The next line should contain m — the number
of cables. The next m lines should contain 3 integers each: u, v and w, meaning that there is a cable
between computers u and v, and it has latency w. Lines should be sorted first by u, then by v, with
u < v. If there are multiple answers, any one will do. If the situation is impossible, print ‘Need better
measurements.’ Print an empty line after each test case.
Sample Input
2
3
100
200 100
3
100
300 100
Sample Output
Case #1:
Universidad de Valladolid OJ: 10987 – AntiFloyd 2/2
2
1 2 100
2 3 100
Case #2:
Need better measurements.

------------------------------------------------------------

10988 From G to H and back
“All right, I’m stumped... and I think I’m supposed to be.”
Dana Scully
There is a funny transformation that you can do with a graph. We start with an undirected graph,
G, and build a new graph, H. G has nvertices and medges. For each edge in G, we create a vertex
in H. Two vertices in H are connected by an edge if and only if their corresponding edges in G share a
vertex. H will have mvertices and pedges.
That’s easy. But what about reconstructing G, given H?
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with two lines
containing m(at most 320) and p. plines follow, each containing two different vertices (numbered from
1 to m) in H which are connected by an edge.
Output
For each test case, output one line containing ‘Case #x:’ followed by either ‘yes’ or ‘no’, depending
on whether there exists some graph G that produces the given graph H.
Sample Input
2
3
3
1 2
2 3
3 1
4
3
1 2
1 3
1 4
Sample Output
Case #1: yes
Case #2: no

------------------------------------------------------------

10989 Bomb, Divide and Conquer
“War is God’s way of teaching Americans geography.”
Ambrose Bierce (1842 - 1914)
The enemy has ncities connected by mroads. We have bombers that can destroy roads. The Bomb,
Divide and Conquer strategy dictates that if we separate the enemy’s cities from each other, then the
two (or more) pieces will be easier to secure. Bombing a road has a cost (fuel, risk factor, etc.) What
is the minimum total cost of bombing enough roads to ensure that there is some pair of cities that have
no path between them? A path is a sequence of connected roads.
Input
The first line of input gives the number of cases, N. Ntest cases follow. Each one starts with two
lines containing n(2 ≤n≤150) and m(0 ≤m≤n(n−1)/2). The next mlines contain mtriples of
integers denoting two different cities (between 1 and n) that are connected by a road and the cost of
destroying that road (between 1 and 1000).
Output
For each test case, output one line containing ‘Case #x:’ followed by the total cost of disconnecting a
pair of cities.
Sample Input
4
5
4
1 2 100
2 3 299
3 5 400
5 4 99
3
3
1 2 10
2 3 20
1 3 40
4
5
1 2 10
2 3 100
3 4 10
4 1 100
1 3 10
3
1
1 2 1000
Universidad de Valladolid OJ: 10989 – Bomb, Divide and Conquer 2/2
Sample Output
Case #1: 99
Case #2: 30
Case #3: 30
Case #4: 0

------------------------------------------------------------

10990 Another New Function
The depth of phi value of a number is denoted by the number of steps required before it reaches 1. An
example will make it very clear.
φ(13) = 12 . . . step1
φ(12) = 4 . . . step2
φ(4) = 2 . . . step3
φ(2) = 1 . . . step1
So the depth of phi(13) is 4. We name this function as depthphi. So we can write depthphi(13) = 4.
The sum of depthphi function (SODF) takes two integers as parameter and its definition is given below:
SODF(m, n)=
n∑
i=m
depthphi(i), m ≤n
Given the value of m and n your job is to find the value of SODF(m, n).
The following paragraph is extracted from Mathworld to inform you about phi function.
The totient function φ(n) or phi(n), also called Euler’s totient function, is defined as the number
of positive integers ≤n that are relatively prime to (i.e., do not contain any factor in common with) n,
where 1 is counted as being relatively prime to all numbers. Since a number less than or equal to and
relatively prime to a given number is called a totative the totient function φ(n) can be simply defined
as the number of totatives of n. For example, there are eight totatives of 24 (1, 5, 7, 11, 13, 17, 19, and
23), so φ(24) = 8 . The totient function is implemented in Mathematica as EulerPhi[n].
Input
The first line of the input file contains an integer N (0 < N < 2001) which indicates how many sets of
inputs are there. Each of the next N lines contains two integers m and n (2 ≤m ≤n ≤2000000).
Output
For each line of input produce one line of output. This line contains an integer S, which actually
denotes the value of SODF(m, n).
Sample Input
2
2 10
100000 200000
Sample Output
22
1495105

------------------------------------------------------------

10991 Region
From the figure on the right, it is clear that C1,
C2 and C3 circles are touching each other.
Consider,
C1 circle have R1 radius.
C2 circle have R2 radius.
C3 circle have R3 radius.
Write a program that will calculate the area
of shaded region G
Input
The first line will contain an integer k(1 ≤k≤
1000) which is the number of cases to solve.
Each of the following k Lines will contain three
floating point number R1 (1 ≤R1 ≤1000), R2
(1 ≤R2 ≤1000) and R3 (1 ≤R3 ≤1000).
Output
For each line of input, generate one line of out-
put containing the area of G rounded to six
decimal digits after the decimal point. Floating-point errors will be ignored by special judge program.
Sample Input
2
5.70 1.00 7.89
478.61 759.84 28.36
Sample Output
1.2243
2361.0058

------------------------------------------------------------

10992 The Ghost of Programmers
Year2500.
Head of the CSE department of IIUC Dhaka Campus Mr. Shamsul Alam is telling a story to the
new students, “This is the oldest building of IIUC-Dhaka Campus. We never go into this building.”
Students ask him why. He says. “It is the story of 21st century. Our authority always used to arrange
programming contests in this building and for this purpose all of the problemsetters of that time used
to come here. All of them liked this place very much. But the main problem is that even after their
death their ghosts began to come here.” Students ask “How many ghosts are there, sir?”. “No body
knows their number. But I can tell the name of main nine ghosts.”
0. The ghost of Tanveer Ahsan - It comes in every 2 year
1. The ghost of Shahriar Manzoor - It comes in every 5 year
2. The ghost of Adrian Kugel - It comes in every 7 year
3. The ghost of Anton Maydell - It comes in every 11 year
4. The ghost of Derek Kisman - It comes in every 15 year
5. The ghost of Rezaul Alam Chowdhury - It comes in every 20 year
6. The ghost of Jimmy Mardell - It comes in every 28 year
7. The ghost of Monirul Hasan - It comes in every 36 year
and finally the second most frequent visitor
8. The ghost of K. M. Iftekhar - It comes in every leap year
Students again ask which ghost came first. His reply was, “All the ghost first came at the year
2148”.
Now your task is to write a program which can answer that which ghost/ghosts will come for a
given year.
Input
There are will be at most 250 lines of data in the input file each containing a positive integer Y. Yhas
less than fifty digits. Input is terminated by a line which contains a zero.
Output
For each Y, output will contain the year itself on the first line followed by the name of the ghosts which
will come on that year in the form ‘Ghost of G!!!’ (without quotes). Gshould be replaced with the
name of the ghost. If more than one ghost come then follow the order of names as given in the problem
statement. If for a given year no ghost from the given names will come then print ‘No ghost will
come in this year’ (without quotes). Print a blank line between two consecutive output.
NB: Leap year is a year that is divisible by 4 and not divisible by 100. But the years that are divisible
by 400 are also leap year. For example 2004, 2000 is a leapyear but 1973, 1700 is not leapyear.
Universidad de Valladolid OJ: 10992 – The Ghost of Programmers 2/2
This problem will be set by the Ghost of K. M. Iftekhar from the balcony of the oldest building of
IIUC Dhaka Campus.
This problem will be significantly moderated by Shahriar Manzoor (Southeast University,
Bangladesh) to make it more interesting, when he will first meet the problemsetter after the story
being told by the head of IIUC DC in 2500 AD.
Sample Input
2500
3000
0
Sample Output
2500
Ghost of Tanveer Ahsan!!!
Ghost of Anton Maydell!!!
3000
Ghost of Tanveer Ahsan!!!

------------------------------------------------------------

10993 Ignoring Digits
When representing a number in decimal format, we need the ten digits ‘0’ to ‘9’. If we are only allowed
to use a subset of the ten decimal digits, there is only a limited number of numbers we can represent.
If, for example, we only can use the digits ‘1’ and ‘2’, the numbers 11 and 12 can be represented, but
the number 13 can not. If we scan the multiples of 13: 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143,
156, 169, 182, 195, 208, 221, etc., we see that 221 is the smallest multiple of 13 that can be represented
using only the digits ‘1’ and ‘2’.
In this problem you are asked to give the smallest multiple of a certain number that can be repre-
sented using a given subset of the decimal digits. This multiple can be the number itself, but it has to
be greater than zero.
Input
The input consists of several cases, each on a line by itself. Each line has two numbers Fand N. Fis
a number composed of the digits you are allowed to use in the representation. It has a minimum of 1
and a maximum of 10 unique digits in descending order. Nis the number for which you are to find the
multiple. It is greater than zero, but smaller than 100000.
A line with two zeros ends the input and should not be processed.
Output
For every case in the input, one line containing the smallest multiple of Nthat can be represented
using the digits in F. If such a multiple of Ndoesn’t exist, print the word ‘impossible’ (without the
quotes). Never print leading zeros.
Sample Input
1 11
21 12
21 13
9876543210 12345
43210 56789
97531 2
0 0
Sample Output
11
12
221
12345
1022202
impossible

------------------------------------------------------------

10994 Simple Addition
Lets define a simple recursive function F (n), where
F (n) = p(x) =


n%10, if (n%10) > 0
0, if n = 0
F (n/10), Otherwise
Lets define another function S(p, q),
S(p, q) =
q∑
i=p
F (i)
In this problem you have to Calculate S(p, q) on given value of p and q.
Input
The input file contains several lines of inputs. Each line contains two non negative integers p and q
(p ≤q) separated by a single space. p and q will fit in 32 bit signed integer. In put is terminated by a
line which contains two negative integers. This line should not be processed.
Output
For each set of input print a single line of the value of S(p, q).
Sample Input
1 10
10 20
30 40
-1 -1
Sample Output
46
48
52

------------------------------------------------------------

10995 Educational journey
The University of Calgary team qualified for the 28th ACM
International Collegiate Programming Contest World Finals in
Prague, Czech Republic. Just by using the initials of team mem-
bers they got a very cunning team name: ACM (Alecs, Celly
and Monny). In order to prepare for the contest, they have de-
cided to travel to Edmonton to learn the tricks of trade from
Dilbert, Alberta-wide famous top-coder.
Due to a horrible miscommunication which is as welcome as
a plague among such teams, A, C and M drive from Calgary
to Edmonton in separate cars. To make things worse, there was
also a miscommunication with D, who being always so helpful,
decides to go to Calgary in order to save the team a trip to the
far, freezing North. All this happens on the same day and each
car travels at a constant (but not necessarily the same) speed on
the famous Alberta #2.
Then A passed C and M at time t1 and t2, respectively, and
met D at time t3. D met C and M at times t4 and t5, respectively.
The question is: at what time did C pass M?
Input
The input is a sequence of lines, each containing times t1, t2, t3, t4 and t5, separated by white space.
All times are distinct and given in increasing order. Each time is given in the hh:mm:ssformat on
the 24-hour clock. A line containing ‘-1’ terminates the input.
Output
For each line of input produce one line of output giving the time when C passed M in the same format
as input, rounding the seconds in the standard way.
Sample Input
10:00:00 11:00:00 12:00:00 13:00:00 14:00:00
10:20:00 10:58:00 14:32:00 14:59:00 16:00:00
10:20:00 12:58:00 14:32:00 14:59:00 16:00:00
08:00:00 09:00:00 10:00:00 12:00:00 14:00:00
-1
Sample Output
12:00:00
11:16:54
13:37:32
10:40:00

------------------------------------------------------------

10996 Go
Go is played on a square board with an odd
number of vertical and horizontal lines. The
usual board sizes are 9×9, 13×13 and 19×19.
But we’ll assume the size in n×nfor 3 ≤n≤
19.
Black and White alternately play stones on
the intersection between two lines. Black starts.
At any time one player may pass – not play a
stone – but if both players pass the game ends.
We’ll denote playing a stone by P(x,y) where
Pis either B (for Black) or W (for White) and
(1 −n)/2 ≤x,y≤(n−1)/2 gives the grid
position of the stone to be played. The centre
intersection of the board has coordinates (0,0).
The rules of Go are reasonably straightfor-
ward, but the nuances of strategy make it an
extremely challenging game. You are to use
the following rules.
• Black plays first.
• Black and White alternate; at each turn a player may place a stone or may pass. The game ends
when Black and White pass consecutively.
• A stone may be played only on an unoccupied intersection.
• If one player P places a stone so that his or her stones (along with the edge of the board) completely
surround a connected area occupied by stones belonging to the other player, Q, Q’s stones are said
to be captured and removed from the board. More precisely, two intersections are connected if
they are horizontally or vertically (but not diagonally) adjacent. Stones in an area are completely
surrounded if no stone is connected with a vacant intersection.
• If P places a stone that causes Q’s stones to be captured, P’s stone is not captured.
• A connected area surrounded by P’s stones which contains none of Q’s stones is said to be owned
by P.
• The score for player P is the number of vacant intersections owned by P in the final board
configuration plus the number of Q’s stones captured by P at any time during the game.
Input
The input consists of several test cases. Each test case begins with a line containing n— the size of the
board — and m— the number of stones placed in the game. mlines follow, each giving a placement in
the format above. Note that mcounts only stone placements — passes may result in two consecutive
placements by the same player. You may assume that each move is legal. A line containing ‘0 0’ follows
the last test case.
Universidad de Valladolid OJ: 10996 – Go 2/2
Output
For each test case, output a line with two numbers: Black’s score followed by White’s score.
Sample Input
7 6
B(-2,-2)
W(2,2)
B(-2,-3)
W(2,3)
B(-3,-2)
W(3,2)
7 6
B(-2,-3)
W(-3,-3)
B(-2,-2)
W(3,2)
B(-3,-2)
W(2,3)
0 0
Sample Output
1 1
2 1

------------------------------------------------------------

10997 Medals
At the Olympic Games, countries are ranked accord-
ing to the number of medals their athletes won. How-
ever, there is more than one possible way of rank-
ing countries by their medals. In Europe, for exam-
ple, countries are first ranked by the number of gold
medals their athletes won. Ties are broken by look-
ing at silver medals, and then at bronze medals. In
Canada, however, because Canadian athletes do not
win very many gold medals, countries are ranked by
the overall number of medals won, giving the same
weight to gold, silver, and bronze medals.
In general, a ranking scheme can be thought of as
a vector of positive weights. This vector is multiplied
with the vector of medals won by each country, and
the scalar product of the two vectors defines the score
of the respective country, which is then used to produce the ranking. In this general scheme, the
European ranking technique corresponds to the weight vector (1020,1010,1), whereas the Canadian
method corresponds to the vector (1,1,1).
In this problem, you will only need to consider weight vectors of the form (1/nj,1/nk,1/nl), where
nis the total number of medals won by all athletes in the Olympic Games, and j, k, and lare integers.
Input
The input contains multiple test cases. Each test case starts with an integer c, the number of countries
to follow. Each of the following clines contains the name of a country and three integers g, s, and b—
the number of gold, silver, and bronze medals won by the country. The last test case has c= 0 and must
not be processed. It is guaranteed that each test case contains at most 20 different countries and that
the total number of medals smaller than 100. Country names do not contain whitespace characters.
Output
Given a list of countries and the number of gold, silver, and bronze medals won by each country, print
the line
Canada wins!
if there is a weight vector of the above form such that Canada ranks first according to the ranking
scheme defined by that vector. Print the line
Canada cannot win.
if no such vector exists.
Sample Input
2
Canada 3 2 1
USA 1 2 3
2
Universidad de Valladolid OJ: 10997 – Medals 2/2
USA 2 2 2
Canada 1 1 1
0
Sample Output
Canada wins!
Canada cannot win.

------------------------------------------------------------

10998 Flipping colors
A rectangle with sides parallel to the x-
y axes and its left-lower corner at (0,0)
is being painted. The rectangle may be
thought of as a flat-screen display with
almost infinite resolution; initially the en-
tire rectangle is black.
Two numbers are given 0 <h, v<1
and then
• A vertical line is drawn dividing the
horizontal sides of the rectangle in proportion h: 1 −hfrom the left.
• A horizontal line is drawn dividing the vertical sides of the rectangles in proportion v: 1 −vfrom
the bottom up.
• These two lines divide the rectangle into four smaller rectangles.
• The upper left and the lower right sub-rectangles remain intact.
• The color of the other two rectangles is flipped (from black to white or from white to black) and
now each of them is subject to the operation just performed on the bigger rectangle.
• This process continues (in principle) forever.
Given a point in the original rectangle but not on the boundary of any rectangle that turns up in
the process of painting, determine the color of the point.
Input
Input contains multiple cases. The first line of each case contains 4 numbers, the length of the rectangle
H, the height of the rectangle Vand then the numbers hand v. The next line contains one integer
number n, the number of points to consider. The following nlines contain two numbers each, the x
and the ycoordinate of a point.
Output
Organize your output as shown in the sample. For each point from input print the color of the point.
Sample Input
81 32 0.333333333333 0.5
6
16 30
16 25
16 12.0001
16 11.9999
16 7.987654321
16 7.0123456789
Universidad de Valladolid OJ: 10998 – Flipping colors 2/2
10 10 0.123456789 0.987654321
2
0.432 0.9876
9.432 0.9876
0 0 0 0
Sample Output
Case 1:
black
black
white
black
white
white
Case 2:
white
black

------------------------------------------------------------

10999 Crabbles
Jennifer is practicing for a Crabbles tournament. She pulls
out a handful of Crabbles tiles out of a bag, and tries to form
the word with the highest possible score. Each tile contains a
letter (used to form the word) and a number (its score value).
She can use each tile at most once in her word, and she is
not required to use every tile. The word that she forms must
appear in her dictionary. Her score is the sum of the values of
the tiles used in the word.
Note that in Crabble, different tiles with the same letter
may have different score values.
To check her work, Jennifer would like a program to tell
her the maximum score possible for the set of tiles. Your task
is to write this program.
Input
The first line contains an integer 1 ≤N≤100,000 indicating the number of words in the dictionary.
Nlines follow, with one dictionary word on each line. Each dictionary word consists of only lowercase
letters. The following line contains an integer 1 ≤M≤1000 indicating the number of Crabbles hands
Jennifer wants to play. M hands follow. Each hand begins with a line containing an integer 1 ≤P≤10
indicating the number of tiles in the hand. This is followed by P lines, one for each tile. Each of these
lines consists of a lowercase letter (the letter on the tile), a space, and an integer 0 ≤V≤10 (the value
of the tile).
Output
For each hand in the input, output a line containing the maximum score possible with that hand.
Sample Input
2
abcd
hgfe
1
10
a 1
b 2
c 3
d 4
e 5
f 6
g 7
h 8
i 9
j 10
Universidad de Valladolid OJ: 10999 – Crabbles 2/2
Sample Output
26

------------------------------------------------------------

