10100 Longest Match
A newly opened detective agency is struggling with their limited intelligence to find out a secret infor-
mation passing technique among its detectives. Since they are new in this profession, they know well
that their messages will easily be trapped and hence modified by other groups. They want to guess
the intensions of other groups by checking the changed sections of messages. First they have to get the
length of longest match. You are going to help them.

Input
The input file may contain multiple test cases. Each case will contain two successive lines of string.
Blank lines and non-letter printable punctuation characters may appear. Each Line of string will be no
longer than 1000 characters. Length of each word will be less than 20 characters.
Output
For each case of input, you have to output a line starting with the case number right justified in a field
width of two, followed by the longest match as shown in the sample output. In case of at least one blank
line for each input output ‘Blank!’. Consider the non-letter punctuation characters as white-spaces.

Sample Input
This is a test.
test
Hello!
The document provides late-breaking information
late breaking.

Sample Output
1. Length of longest match: 1
2. Blank!
3. Length of longest match: 2

-----------------------------------------------------------------------------------------------------------

10101 Bangla Numbers
Bangla numbers normally use ’kuti’ (10000000), ’lakh’ (100000), ’hajar’ (1000), ’shata’ (100) while
expanding and converting to text. You are going to write a program to convert a given number to text
with them.

Input
The input file may contain several test cases. Each case will contain a non-negative number
≤999999999999999.
Output
For each case of input, you have to output a line starting with the case number with four digits
adjustment followed by the converted text.

Sample Input
23764
45897458973958
Sample Output
1. 23 hajar 7 shata 64
2. 45 lakh 89 hajar 7 shata 45 kuti 89 lakh 73 hajar 9 shata 58

-----------------------------------------------------------------------------------------------------------

10102 The path in the colored field
The square field consists of M×Mcells. Each cell is colored in one of three colors (1,2,3). The initial
state is chosen in one of the cells of color 1. In each step one allowed to move one cell up, down, left or
right remaining inside the field.
You are to define the minimal amount of steps one should make to get a cell of color 3 independent
on the initial state.
Note that the field contains at least one cell of color 1 and at least one cell of color 3.

Input
The input consists of several input blocks. The first line of each block contains integer M, the size of
the field. Then there are Mlines with colors of the cells.
Output
For each input block the output should consist of one line with the integer, the minimal amount of
steps one should make to get a cell of color 3 independent on the initial state.

Sample Input
4
1223
2123
2213
3212
2
12
33
Sample Output
3
1

-----------------------------------------------------------------------------------------------------------

10103 Karpovich blocks
From the unit blocks of three kinds one creates a cube N×N×N(1 <N<10). Some minutes later
all the unit blocks of the same kind with common faces glue together. So three details appeared.
Determine, if there is possible to separate all the details not destroying them.

Input
The input will consist of several input blocks. Each input block begins with the integer N, the size of
the cube. Then there is an empty line. Then Nseries of Nlines, determined Ncube layers. Each line
contains Nletters (‘R’, ‘G’, ‘B’), defining the kind of the block. Each layer-series except the last one in
the last input block is followed by an empty line. The last input block is followed by <EOF>.
Output
For each input block the output line should contain a word “NO” if there is impossible to separate
details. In another case it should consist of the kinds of details which can be separated. (‘R’ should
precede ‘G’, ‘G’ precedes ‘B’).

Sample Input
2
RR
RR
GB
GR
3
BRR
RRR
RBB
BRR
GGG
RGB
BBR
BBR
BBB
Sample Output
RGB
NO

-----------------------------------------------------------------------------------------------------------

10104 Euclid Problem
From Euclid it is known that for any positive integers Aand Bthere exist such integers Xand Ythat
AX+ BY= D, where Dis the greatest common divisor of Aand B. The problem is to find for given
Aand Bcorresponding X, Yand D.

Input
The input will consist of a set of lines with the integer numbers Aand B, separated with space
(A,B<1000000001).
Output
For each input line the output line should consist of three integers X, Yand D, separated with space.
If there are several such Xand Y, you should output that pair for which |X|+ |Y|is the minimal. If
there are several Xand Ysatisfying the minimal criteria, output the pair for which X≤Y.

Sample Input
4 6
17 17
Sample Output
-1 1 2
0 1 17

-----------------------------------------------------------------------------------------------------------

10105 Polynomial coefficients
The problem is to calculate the coefficients in expansion of polynomial (x1 + x2 + ...+ xk)n.

Input
The input will consist of a set of pairs of lines. The first line of the pair consists of two integers nand
kseparated with space (0 <K,N<13). This integers define the power of the polynomial and the
amount of the variables. The second line in each pair consists of knon-negative integers n1,...,nk,
where n1 + ...+ nk= n.
Output
For each input pair of lines the output line should consist one integer, the coefficient by the monomial
xn1
1 xn2
2 ...xnk
kin expansion of the polynomial (x1 + x2 + ...+ xk)n.

Sample Input
2 2
1 1
2 12
1 0 0 0 0 0 0 0 0 0 1 0
Sample Output
2
2

-----------------------------------------------------------------------------------------------------------

10106 Product
The problem is to multiply two integers X, Y. (0 ≤X,Y<10250)

Input
The input will consist of a set of pairs of lines. Each line in pair contains one multiplyer.
Output
For each input pair of lines the output line should consist one integer the product.

Sample Input
12
12
2
222222222222222222222222
Sample Output
144
444444444444444444444444

-----------------------------------------------------------------------------------------------------------

10107 What is the Median?
Median plays an important role in the world of statistics. By definition, it is a value which divides
an array into two equal parts. In this problem you are to determine the current median of some long
integers. Suppose, we have five numbers {1,3,6,2,7}. In this case, 3 is the median as it has exactly two
numbers on its each side. {1,2} and {6,7}. If there are even number of values like {1,3,6,2,7,8}, only
one value cannot split this array into equal two parts, so we consider the average of the middle values
{3,6}. Thus, the median will be (3+6)/2 = 4.5. In this problem, you have to print only the integer
part, not the fractional. As a result, according to this problem, the median will be 4 !

Input
The input file consists of series of integers X(0≤X<231) and total number of integers Nis less than
10000. The numbers may have leading or trailing spaces.
Output
For each input print the current value of the median.

Sample Input
1
3
4
60
70
50
2
Sample Output
1
2
3
3
4
27
4

-----------------------------------------------------------------------------------------------------------

10108 The Mosquito Killer Mosquitos
In the last winter the whole Bangladesh was suffering from the attack of mosquitos. They were huge
and they were big. Unfortunately the honourable Mayor of Dhaka was calimed for this reason and he
had a notice for a “show cause”. He was at a loss what to do and began to search for the orders recently
he had given concerning mosquitos. Searching and searching all the mammoth data’s on computers and
documents is a harculean task. At last he found an order on a mosquito research named “MOSQUITO
KILLER MOSQUITOS” which was proposed by a project of Science Laboratory of Bangladesh. This
was a harmless project which states that the project is on procreation of mosquitos from which easy
ways can be found to control the reproduction of mosquitos.
In the descrpition part there was a statement that they were going to produce such mosquitos
which will be the killer of normal mosquitos. This kind of mosquitos will grow rapidly and spread in a
completely structured way. Moreover these mosquitos will have common gender , thus creating a new
way of generation. Any two of them will be able to regenerate new mosquitos among themselves. In
one day they will meet just once with every mosquito and lay only one egg for each meet. The eggs
will become rapidly reproducable mosquitos on the next day. In each weekday the number equal to the
square root (expressed in integer) of them will remain in the pond and others will go to other ponds
to cover corresponding areas. They will not meet and lay eggs that day. These mosquitos will leave
on garbaze, destructing the unwanted garbaze. Thus detroying harmful moquitos and garbaze of the
whole Bangladesh (as well as the whole Universe).
After these statements there was remark saying that “This project on MOSQUITO KILLER
MOSQUITOS seems to bring new horizon to science. So this project is granted giving all kinds of
facilites available.” and signed “The Mayor of Dhaka”.
Reading all these the Mayor took an inquiry to the database of current project on science and found
the project of the “MOSQUITO KILLER MOSQUITOS” was falied due to the fact that they were able
to produce such big mosquitos but failed to make garbaze as their food. This project was stopped and
the generated mosquitos was all destroyed. A few of them was kept in the lab for future research. This
made Mayor think. He ordered his detectives to report on where these mosquitos were. In that evening
the detectives reported that some of those mosquitos were stolen by someone from the lab.
Now the Mayor understood the reason for so many mosquitos. Also understood the reason for the
“Dengu Fever” caused in Dhaka few mounths ago. And he got paniced how bad the situation can be!
He begun to take necessary steps against this situation. But before he could take any step he wanted
to know how many mosquitos were out there? He e-mailed you (The responsible programmer for The
Peoples Republic of Bangladesh) to write a program for him and help in this great danger of Bangladesh
as well as the World.

Input
The input will consist on a set of lines. Each line will contain two integers. First one represents the
number of mosquitos in a pond at the very begining. The second integer represents the number of days
have passed after the starting day. You may assume the input will fit in a 32 bit integer. A negative
number will indicate the end of input.
Output
For each set of input output the integer representing the number of mosquitos in that pond in that day
in the format as shown in the sample output below. Output a single line for each line of input.

Sample Input
4 1
-1 -1
Sample Output
Number of mosquitos in the pond at the end of 1'st day is 10.

-----------------------------------------------------------------------------------------------------------

10109 Solving Systems of Linear Equations
You may have solved linear equation early in the school. Problems involving solving sets of linear
equation are very important in the field of Engineering and Mathematics.
Let us consider that we have a system of linear equations
a11 x1 + a12 x2 + a13 x3 = c1
a21 x1 + a22 x2 + a23 x3 = c2
a31 x1 + a32 x2 + a33 x3 = c3
We can solve it by reducing technique:
Step 1:
a11 x1 + a12
a11 x2 + a13
a11 x3 = c1
a11
a21 x1 + a22 x2 + a23 x3 = c2
a31 x1 + a32 x2 + a33 x3 = c3
Step 2:
a11 x1 + a12
a11 x2 + a13
a11 x3 = c1
a11
a22 −a21 a12
a11 x2 + a23 −a21 a13
a11 x3 = c2 −a21 c1
a11
a32 −a31 a12
a11 x2 + a33 −a31 a13
a11 x3 = c3 −a31 c1
a11
Now do as step 1 for second row and so on.
This can be made more effective using matrix method. The set of equation for nunknowns can be
written as
a11 x1 + a12 x2 + a13 x3 + ...+ a1nxn= c1
a21 x1 + a22 x2 + a23 x3 + ...+ a2nxn= c2
a31 x1 + a32 x2 + a33 x3 + ...+ a3nxn= c3
... ... ... ... ... = ...
an1 x1 + an2 x2 + an3 x3 + ...+ annxn= cn
In matrix form 

a11 a12 a13 ...a1n
a21 a22 a23 ...a2n
a31 a32 a33 ...a3n
... ... ... ... ...
an1 an2 an3 ...ann




x1
x2
x2
...
xn


=


c1
c2
c2
...
cn


Compactly [A] ∗{X}= {C}
From this we can solve values of X’s. The matrix [AC] is called an augmented (see example below)
matrix. If after elimination process the rank of matrix [A] and rank of matrix [AC] not equals, the
system is called inconsistent and it does not have a solution. If the matrix is consistent and number
of unknowns is greater then rank of matrix then the matrix system has arbitarily many solutions
containing (NumberOfUnknowns-rank) arbitary constants. Rank of a matrix is defined as the number
of non zero rows of a matrix system. Otherwise if the rank and number of unknows equals then the
system has been solved.
For example let a system of equations be
Universidad de Valladolid OJ: 10109 – Solving Systems of Linear Equations 2/5
9x1 + 4x2 + x3 = −17
x1 −2x2 −6x3 = 14
x1 + 6x2 = 4
This sets of equation can be written as
9 4 1 −17
1 −2 −6 14
1 6 0 4
So the steps involving the solution is Step : 1
1 −2 −6 14
1 6 0 4
9 4 1 −17
Step : 2
1 −2 −6 14
0 8 6 −10
0 22 55 −143
Step : 3
1 −2 −6 14
0 1 3/4 −5/4
0 0 77/2 −231/2
Step : 4
1 −2 −6 14
0 1 3/4 −5/4
0 0 1 −3
Step : 5
1 −2 0 −4
0 1 0 1
0 0 1 −3
Step : 6
1 0 0 −2
0 1 0 1
0 0 1 −3
and then, the solution is
x1 = −2,x2 = 1,x3 = −3
Again consider this system
2x1 + 2x2 + 2x3 = 2
4x1 + 4x2 + 4x3 = 4
16x1 + 16x2 + 16x3 = 16
Steps are: Step : 1
Universidad de Valladolid OJ: 10109 – Solving Systems of Linear Equations 3/5
2 2 2 2
4 4 4 4
16 16 16 16
Step : 2
1 1 1 1
0 0 0 0
0 0 0 0
This system has number of unknowns 3 and rank is 1. So this system has arbitarily many solutions
containing (3-1) = 2 arbitary constants.
Another system
x+ y= 10,x+ y= 20,2x+ 2y= 50
Steps are: Step : 1
1 1 10
1 1 20
2 2 50
Step : 2
1 1 10
0 0 10
0 0 30
Step : 3
1 1 10
0 0 10
0 0 30
Step : 4
1 1 10
0 0 10
0 0 1
Step : 5
1 1 0
0 0 0
0 0 1
Step : 6
1 1 0
0 0 0
0 0 1
As rank of [A] (in this case: rank(A) = 1) is not equal to the rank of augmented matrix [AC] (in
this case: rank(AC) = 2) , the system has no solution.
However though there are other methods to compute this solution for the matrix system, the main
problem occurs are
1. Round off errors or computational error due to the use of floating point number
Universidad de Valladolid OJ: 10109 – Solving Systems of Linear Equations 4/5
2. Error due to wrong order of the given equation.
To prevent round off error due to floating point number an approach can be used, similar to the
process of doing fractional number. So we may use 1/3 as a expression of two integer, the numerator
and the denominator, instead of .333333 (with loss of precision). Thus we can prevent this kind of
error.
Consider this set of equations
5x3 = 10
3x2 −3x3 = 3
2x1 −x2 + 2x3 = 7
This set of equations can be written as
0 0 5 10
0 3 −3 3
2 −1 2 7
Now how will you evaluate this matrix without ordering?

Input
The first line of input is the number of the problem. The next line contains two integers - NumberO-
fUnknowns and NumberOfEquations (none of these is less then or equal to 0 and greater then 50). The
next lines contains the matrix for the system of linear equations. There are number of rows equal to
the NumberOfEquations and number of column equal to the NumberOfUnknowns+1. The numbers
may be fractional, that is there may be numbers like 1/3 or 6/8. An problem number zero indicates
the end of input.
Output
First print (without the quotation mark)
"Solution for Matrix System # N"
Here ‘N’ is the problem number as taken from input. Then on the next line, for each system of
equations output the solution (if exists) expressed in the fractional form in each line. You may assume
each of the numerator and denominator part will not exceed the limit of data type long long (64 bit).
If there are many solutions as described above print (without the quotation mark)
"Infinitely many solutions containing n arbitrary constants."
(here ‘n’ is the number as described above) , and if there is no solutions print (without the quotation
mark)
"No Solution."
Print a blank line between two systems of linear equations.

Sample Input
1
3 3
9 4 1 -17
1 -2 -6 14
1 6 0 4
2
3 3
2 2 2 2
4 4 4 4
16/1 16/1 16/1 16/1
3
2 3
1 1 10
1 1 20
2 2 50
4
1 1
3 10
0
Sample Output
Solution for Matrix System # 1
x[1] = -2
x[2] = 1
x[3] = -3
Solution for Matrix System # 2
Infinitely many solutions containing 2 arbitrary constants.
Solution for Matrix System # 3
No Solution.
Solution for Matrix System # 4
x[1] = 10/3

-----------------------------------------------------------------------------------------------------------

10110 Light, more light
There is man named ”mabu” for switching on-off light in our University. He switches on-off the lights
in a corridor. Every bulb has its own toggle switch. That is, if it is pressed then the bulb turns on.
Another press will turn it off. To save power consumption (or may be he is mad or something else)
he does a peculiar thing. If in a corridor there is n bulbs, he walks along the corridor back and forth
n times and in i-th walk he toggles only the switches whose serial is divisable by i. He does not press
any switch when coming back to his initial position. A i-th walk is defined as going down the corridor
(while doing the peculiar thing) and coming back again. Now you have to determine what is the final
condition of the last bulb. Is it on or off?

Input
The input will be an integer indicating the n’th bulb in a corridor. Which is less then or equals 232−1.
A zero indicates the end of input. You should not process this input.
Output
Output ‘yes’ if the light is on otherwise ‘no’, in a single line.

Sample Input
3
6241
8191
0
Sample Output
no
yes
no

-----------------------------------------------------------------------------------------------------------

10111 Find the Winning Move
4×4tic-tac-toe is played on a board with four rows (numbered 0 to 3 from top to bottom) and four
columns (numbered 0 to 3 from left to right). There are two players, xand o, who move alternately
with xalways going first. The game is won by the first player to get four of his or her pieces on the
same row, column, or diagonal. If the board is full and neither player has won then the game is a draw.
Assuming that it is x’s turn to move, xis said to have a forced win if xcan make a move such
that no matter what moves omakes for the rest of the game, xcan win. This does not necessarily mean
that xwill win on the very next move, although that is a possibility. It means that xhas a winning
strategy that will guarantee an eventual victory regardless of what odoes.
Your job is to write a program that, given a partially-completed game with xto move next, will
determine whether xhas a forced win. You can assume that each player has made at least two moves,
that the game has not already been won by either player, and that the board is not full.

Input
The input file contains one or more test cases, followed by a line beginning with a dollar sign that
signals the end of the file. Each test case begins with a line containing a question mark and is followed
by four lines representing the board; formatting is exactly as shown in the example. The characters
used in a board description are the period (representing an empty space), lowercase x, and lowercase o.
Output
For each test case, output a line containing the (row, column) position of the first forced win for x, or
‘#####’ if there is no forced win. Format the output exactly as shown in the example.
For this problem, the first forced win is determined by board position, not the number of moves
required for victory. Search for a forced win by examining positions (0, 0), (0, 1), (0, 2), (0, 3), (1, 0),
(1, 1), ..., (3, 2), (3, 3), in that order, and output the first forced win you find. In the second test case
below, note that xcould win immediately by playing at (0, 3) or (2, 0), but playing at (0, 1) will still
ensure victory (although it unnecessarily delays it), and position (0, 1) comes first.

Sample Input
?
....
.xo.
.ox.
....
?
o...
.ox.
.xxx
xooo
$
Sample Output
#####
(0,1)

-----------------------------------------------------------------------------------------------------------

10112 Myacm Triangles
There has been considerable archeological work on the ancient
Myacm culture. Many artifacts have been found in what have
been called power fields: a fairly small area, less than 100 meters
square where there are from four to fifteen tall monuments with
crystals on top. Such an area is mapped out above. Most of
the artifacts discovered have come from inside a triangular area
between just three of the monuments, now called the power tri-
angle. After considerable analysis archeologists agree how this
triangle is selected from all the triangles with three monuments
as vertices: it is the triangle with the largest possible area that
does not contain any other monuments inside the triangle or on
an edge of the triangle. Each field contains only one such triangle.
Archeological teams are continuing to find more power fields. They would like to automate the
task of locating the power triangles in power fields. Write a program that takes the positions of the
monuments in any number of power fields as input and determines the power triangle for each power
field.
A useful formula: the area of a triangle with vertices (x1,y1), (x2,y2), and (x3,y3)is the absolute
value of
0.5×[(y3 −y1)(x2 −x1)−(y2 −y1)(x3 −x1)].

Input
For each power field there are several lines of data. The first line is the number of monuments: at least
4, and at most 15. For each monument there is a data line that starts with a one character label for
the monument and is followed by the coordinates of the monument, which are nonnegative integers less
than 100. The first label is A, and the next is B, and so on.
There is at least one such power field described. The end of input is indicated by a 0 for the number
of monuments. The first sample data below corresponds to the diagram in the problem.
Output
For each power field there is one line of output. It contains the three labels of the vertices of the power
triangle, listed in increasing alphabetical order, with no spaces.

Sample Input
6
A 1 0
B 4 0
C 0 3
D 1 3
E 4 4
F 0 6
4
A 0 0
B 1 0
C 99 0
D 99 99
0
Sample Output
BEF
BCD

-----------------------------------------------------------------------------------------------------------

10113 Exchange Rates
Using money to pay for goods and services usually makes life easier, but sometimes people prefer to
trade items directly without any money changing hands. In order to ensure a consistent “price”, traders
set an exchange rate between items. The exchange rate between two items A and B is expressed as
two positive integers m and n, and says that m of item A is worth n of item B. For example, 2 stoves
might be worth 3 refrigerators. (Mathematically, 1 stove is worth 1.5 refrigerators, but since it’s hard
to find half a refrigerator, exchange rates are always expressed using integers.)
Your job is to write a program that, given a list of exchange rates, calculates the exchange rate
between any two items.

Input
The input file contains one or more commands, followed by a line beginning with a period that signals
the end of the file. Each command is on a line by itself and is either an assertion or a query. An
assertion begins with an exclamation point and has the format
!m itema =n itemb
where itema and itemb are distinct item names and m and n are both positive integers less than 100.
This command says that m of itema are worth n of itemb. A query begins with a question mark, is of
the form
?itema =itemb
and asks for the exchange rate between itema and itemb, where itema and itemb are distinct items
that have both appeared in previous assertions (although not necessarily the same assertion).
Output
For each query, output the exchange rate between itema and itemb based on all the assertions made up
to that point. Exchange rates must be in integers and must be reduced to lowest terms. If no exchange
rate can be determined at that point, use question marks instead of integers. Format all output exactly
as shown in the example.
Note:
• Item names will have length at most 20 and will contain only lowercase letters.
• Only the singular form of an item name will be used (no plurals).
• There will be at most 60 distinct items.
• There will be at most one assertion for any pair of distinct items.
• There will be no contradictory assertions. For example, “2 pig = 1 cow”, “2 cow = 1 horse”, and
“2 horse = 3 pig” are contradictory.
• Assertions are not necessarily in lowest terms, but output must be.
• Although assertions use numbers less than 100, queries may result in larger numbers that will not
exceed 10000 when reduced to lowest terms.

Sample Input
! 6 shirt = 15 sock
! 47 underwear = 9 pant
? sock = shirt
? shirt = pant
! 2 sock = 1 underwear
? pant = shirt
.
Sample Output
5 sock = 2 shirt
? shirt = ? pant
45 pant = 188 shirt

-----------------------------------------------------------------------------------------------------------

10114 Loansome Car Buyer
Kara Van and Lee Sabre are lonesome. A few months ago they took out a loan to buy a new car, but
now they’re stuck at home on Saturday night without wheels and without money. You see, there was
a wreck and the car was totaled. Their insurance paid $10,000, the current value of the car. The only
problem is that they owed the bank $15,000, and the bank wanted payment immediately, since there
was no longer a car for collateral. In just a few moments, this unfortunate couple not only lost their
car, but lost an additional $5,000 in cash too.
What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each
month the buyer’s loan payment reduces the amount owed on the car. However, each month, the car
also depreciates as it gets older. Your task is to write a program that calculates the first time, measured
in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is
specified as a percentage of the previous month’s value.

Input
Input consists of information for several loans. Each loan consists of one line containing the duration in
months of the loan, the down payment, the amount of the loan, and the number of depreciation records
that follow. All values are nonnegative, with loans being at most 100 months long and car values at most
$75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation
records. Each depreciation record consists of one line with a month number and depreciation percentage,
which is more than 0 and less than 1. These are in strictly increasing order by month, starting at
month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and
is always present in the data. All the other percentages are the amount of depreciation at the end of
the corresponding month. Not all months may be listed in the data. If a month is not listed, then the
previous depreciation percentage applies. The end of the input is signalled by a negative loan duration
- the other three values will be present but indeterminate.
For simplicity, we will assume a 0% interest loan, thus the car’s initial value will be the loan amount
plus the down payment. It is possible for a car’s value and amount owed to be positive numbers less
than $1.00. Do notround values to a whole number of cents ($7,347.635 should not be rounded to
$7,347.64).
Consider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the
lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the
buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2
and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes
$13,000.
Output
For each loan, the output is the number of complete months before the borrower owes less than the car
is worth. Note that English requires plurals (5 months) on all values other than one (1 month).

Sample Input
30 500.0 15000.0 3
0 .10
1 .03
3 .002
12 500.0 9999.99 2
0 .05
2 .1
60 2400.0 30000.0 3
0 .2
1 .05
12 .025
-99 0 17000 1
Sample Output
4 months
1 month
49 months

-----------------------------------------------------------------------------------------------------------

10115 Automatic Editing
Text-processing tools like awk and sed allow you to automatically perform a sequence of editing oper-
ations based on a script. For this problem we consider the specific case in which we want to perform
a series of string replacements, within a single line of text, based on a fixed set of rules. Each rule
specifies the string to find, and the string to replace it with, as shown below.
Rule Find Replace-by
1. ban bab
2. baba be
3. ana any
4. ba b hind the g
To perform the edits for a given line of text, start with the first rule. Replace the first occurrence
of the f ind string within the text by the replace −by string, then try to perform the same replacement
again on the new text. Continue until the f ind string no longer occurs within the text, and then move
on to the next rule. Continue until all the rules have been considered. Note that (1) when searching
for a f ind string, you always start searching at the beginning of the text, (2) once you have finished
using a rule (because the f ind string no longer occurs) you never use that rule again, and (3) case is
significant.
For example, suppose we start with the line
banana boat
and apply these rules. The sequence of transformations is shown below, where occurrences of a f ind
string are underlined and replacements are boldfaced. Note that rule 1 was used twice, then rule 2 was
used once, then rule 3 was used zero times, and then rule 4 was used once.
Before After
banana boat babana boat
babana boat bababa boat
bababa boat beba boat
beba boat behind the goat

Input
The input contains one or more test cases, followed by a line containing only 0 (zero) that signals the
end of the file. Each test case begins with a line containing the number of rules, which will be between
1 and 10. Each rule is specified by a pair of lines, where the first line is the f ind string and the second
line is the replace −by string. Following all the rules is a line containing the text to edit.
Output
For each test case, output a line containing the final edited text.
Note: Both f ind and replace −by strings will be at most 80 characters long. f ind strings will contain
at least one character, but replace −by strings may be empty (indicated in the input file by an empty
line). During the edit process the text may grow as large as 255 characters, but the final output text
will be less than 80 characters long.
The first test case in the sample input below corresponds to the example shown above.

Sample Input
4
ban
bab
baba
be
ana
any
ba b
hind the g
banana boat
1
t
sh
toe or top
0
Sample Output
behind the goat
shoe or shop

-----------------------------------------------------------------------------------------------------------

10116 Robot Motion
A robot has been programmed to follow the instructions in its path. Instructions for the next direction
the robot is to move are laid down in a grid. The possible instructions are
N north (up the page)
S south (down the page)
E east (to the right on the page)
W west (to the left on the page)
For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down).
The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving
the grid.
Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts
a loop through 8 instructions, and never exits.
You are to write a program that determines how long it takes a robot to get out of the grid or how
the robot loops around.

Input
There will be one or more grids for robots to navigate. The data for each is in the following form.
On the first line are three integers separated by blanks: the number of rows in the grid, the number
of columns in the grid, and the number of the column in which the robot enters from the north. The
possible entry columns are numbered starting with one at the left. Then come the rows of the direction
instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The
lines of instructions contain only the characters N, S, E, or W with no blanks.
The end of input is indicated by a row containing 0 0 0.
Output
For each grid in the input there is one line of output. Either the robot follows a certain number of
instructions and exits the grid on any one the four sides or else the robot follows the instructions on
a certain number of locations once, and then the instructions on some number of locations repeatedly.
The sample input below corresponds to the two grids above and illustrates the two forms of output.
The word “step” is always immediately followed by “(s)” whether or not the number before it is 1.

Sample Input
3 6 5
NEESWE
WWWESS
SNWWWW
4 5 1
SESWE
EESNW
NWEEN
EWSEN
0 0 0
Sample Output
10 step(s) to exit
3 step(s) before a loop of 8 step(s)

-----------------------------------------------------------------------------------------------------------

10117 Nice Milk
Little Tomy likes to cover his bread with some milk. He does this by putting it in the cup so that one
of its sides (called bottom side) touches the bottom of the cup, just as the picture below:
Since the milk in the cup is limited, only part of the bread is covered with milk(as shown in the
pictures). That is, only the area between the surface of the milk and the bottom side of the bread is
covered. Note that the distance between these two lines is always h - the depth of the milk, which is
also known to him.
Tomy wants to cover this bread with largest possible area of milk in this way, but he doesn’t want
to do more than k actions. Help him, will you?
(You may assume that the cup is wide enough, wider than any side of the bread, so it’s possible to
cover any side completely)

Input
The input will contain no more than 10 test cases. Each test case begins with a line containing three
integers n, k and h (3 ≤n ≤20, 0 ≤k ≤8, 0 ≤h ≤10). A piece of bread is guaranteed to
be a convex polygon of n vertices. In the following n lines, each line contains two integers xi and
yi(0 ≤xi, yi ≤1000), representing the Cartesianism coordinate of the i-th vertex. The vertices are
anti-clockwise numbered. The test case containing n = 0, k = 0, h = 0 will terminate the input, you
should not give an answer to this case.
Output
Output the area of the largest possible area of bread covered with milk with two decimal places. Output
one line for each test case.

Sample Input
4 2 1
1 0
3 0
5 2
0 4
0 0 0
Sample Output
7.46

-----------------------------------------------------------------------------------------------------------

10118 Free Candies
Little Bob is playing a game. He wants to win some candies in it - as many as possible.
There are 4 piles, each pile contains Ncandies. Bob is given a basket which can hold at most 5
candies. Each time, he puts a candy at the top of one pile into the basket, and if there’re two candies
of the same color in it, he can take both of them outside the basket and put them into his own pocket.
When the basket is full and there are no two candies of the same color, the game ends. If the game is
played perfectly, the game will end with no candies left in the piles.
For example, Bob may play this game like this (N= 5):
Step1 Initial Piles Step2 Take one from pile #2
Piles Basket Pocket Piles Basket Pocket
1 2 3 4 1 3 4
1 5 6 7 1 5 6 7
2 3 3 3 nothing nothing 2 3 3 3 2 nothing
4 9 8 6 4 9 8 6
8 7 2 1 8 7 2 1
Step3 Take one from pile #2 Step4 Take one from pile #3
Piles Basket Pocket Piles Basket Pocket
1 3 4 1 4
1 6 7 1 6 7
2 3 3 3 2 5 nothing 2 3 3 3 2 3 5 nothing
4 9 8 6 4 9 8 6
8 7 2 1 8 7 2 1
Step5 Take one from pile #2 Step6 Put two candies into his pocket
Piles Basket Pocket Piles Basket Pocket
1 4 1 4
1 6 7 1 6 7
2 3 3 2 3 3 5 nothing 2 3 3 2 5 a pair of 3
4 9 8 6 4 9 8 6
8 7 2 1 8 7 2 1
Note that different numbers indicate different colors, there are 20 kinds of colors numbered 1..20.
‘Seems so hard...’ Bob got very much puzzled. How many pairs of candies could he take home at
most?

Input
The input will contain not more than 10 test cases. Each test case begins with a line containing a single
integer n(1 ≤n≤40) representing the height of the piles. In the following nlines, each line contains
four integers xi1, xi2, xi3, xi4 (in the range 1..20). Each integer indicates the color of the corresponding
candy. The test case containing n= 0 will terminate the input, you should not give an answer to this
case.
Output
Output the number of pairs of candies that the cleverest little child can take home. Print your answer
in a single line for each test case.

Sample Input
5
1 2 3 4
1 5 6 7
2 3 3 3
4 9 8 6
8 7 2 1
1
1 2 3 4
3
1 2 3 4
5 6 7 8
1 2 3 4
0
Sample Output
8
0
3

-----------------------------------------------------------------------------------------------------------

10119 Farewell, my friend
Liz and Lilly used to be very good friends, but recently, they got into a silly quarrel and finally decided
to say farewell to each other. “I don’t want to see you any more! I must put some new rocks somewhere
so that no matter how I travel from my house, I can never see your face.” They both said.
They live in a small village which is divided into n ×n grid. Liz always lives in the top-left corner
(i.e grid(1, 1)), and Lilly always lives in the bottom-right corner. (i.e grid(n, n)). Each grid of land is
one of the following types: land, lake or rock. They cannot move across a rock or a lake, of course.
And although people cannot see through a rock, it’s easy for them to see through a piece of land or
a lake. Note that they can only move north, south, east or west one grid at a time, NOT diagonally,
and they are a bit shortsighted - they can only see things that are no more than k grids away in front
of them (in the same row or column. They don’t see anything diagonally).
Since they’re both lazy, they want to put as few new rocks as possible. A new rock can only be put
on a piece of land that at least one of the two girls can reach from her house. Note that they don’t want
to put new rocks too close to their houses, so the new rocks must be at least m grids away from both of
the houses. By definition, grid(x1, y1) and grid(x2, y2) are supposed to be abs(x1 −x2) + abs(y1 −y2)
grids away from each other.

Input
The input will contain no more than 8 test cases. Each test case begins with a line containing three
integers n, k and m(5 ≤n ≤20, 1 ≤k ≤n, 1 ≤m ≤n) separated by a single space. The following n
lines each contains n characters indicating the map of a village. The capital letter ‘O’ represents a lake,
‘*’ represents a rock ,‘.’ represents a piece of land. The test case containing n = 0, k = 0, m = 0 will
terminate the input, you should not give an answer to this case. No extra spaces at the beginning/end
of each line.
Output
Output the least number of new rocks that must be put in order to separate them. Print your answer
in a single line for each test case. If no solution found, you should output ‘-1’ in the corresponding line.
Note:
If they only set one new rock at (4,3), when Liz comes to (2,6) and Lilly comes to (5,6), they can
still see each other. Thus, an additional rock at (2,6) must be put. The new map is shown below: (‘N’
represents a new rock)
.......
.....N*
....*O.
**N*.O.
...*...
.OO..*.
.......

Sample Input
7 4 4
.......
......*
....*O.
**.*.O.
...*...
.OO..*.
.......
0 0 0
Sample Output
2

-----------------------------------------------------------------------------------------------------------

10120 Gift?!
There is a beautiful river in a small village. N rocks are arranged in a straight line numbered 1 to N
from left bank to the right bank, as shown below.
[Lef tBank] −[Rock1] −[Rock2] −[Rock3] −[Rock4] . . . [RockN ] −[RightBank]
The distance between two adjacent rocks is exactly 1 meter, while the distance between the left bank
and rock 1 and the distance between Rock N and the right bank are also 1 meter.
Frog Frank was about to cross the river, his neighbor Frog Funny came to him and said,
“Hello, Frank. Happy Children’s Day! I have a gift for you. See it? A little parcel on Rock 5.”
“Oh, that’s great! Thank you! I’ll get it.”
“Wait...This present is for smart frogs only. You can’t get it by jumping to it directly.”
“Oh? Then what should I do?”
“Jump more times. Your first jump must be from the left bank to Rock 1, then, jump as many
times as you like - no matter forward or backward, but your i-th jump must cover 2 ∗i −1 meters.
What’s more, once you return to the left bank or reach the right bank, the game ends, and no more
jumps are allowed.”
“Hmmm, not easy... let me have a think!” Answered Frog Frank, “Should I give it a try?”

Input
The input will contain no more than 2000 test cases. Each test case contains a single line. It contains
two positive integers N (2 ≤N ≤106), and M (2 ≤M ≤N ), M indicates the number of the rock on
which the gift is located. A test case in which N = 0, M = 0 will terminate the input and should not
be regarded as a test case.
Output
For each test case, output a single line containing ‘Let me try!’ If it’s possible to get to Rock m,
otherwise, output a single line containing ‘Don't make fun of me!
Note: In test case 2, Frank can reach the gift in this way:
F orward(torock4), F orward(torock9), Backward(torock2, gotthegif t!)
Note that if Frank jumps forward in his last jump, he will land on the right bank (assume that
banks are large enough) and thus, lost the game.

Sample Input
9 5
12 2
0 0
Sample Output
Don't make fun of me!
Let me try!

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------